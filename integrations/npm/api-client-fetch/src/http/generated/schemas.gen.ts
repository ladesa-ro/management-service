// This file is auto-generated by @hey-api/openapi-ts

export const $EstadoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
      description: "Identificador do registro (numérico).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/numeric_id.json",
      minimum: 1,
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome oficial do estado.",
    },
    sigla: {
      type: "string",
      nullable: false,
      description: "Sigla do estado.",
      "x-unispec-constraint-estado-sigla": true,
    },
  },
  required: ["id", "nome", "sigla"],
} as const;

export const $CidadeFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
      description: "Identificador do registro (numérico).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/numeric_id.json",
      minimum: 1,
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome oficial da cidade.",
    },
    estado: {
      nullable: false,
      description: "Visão FindOne de um estado.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/EstadoFindOneResultView",
        },
      ],
    },
  },
  required: ["id", "nome", "estado"],
} as const;

export const $EnderecoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    cep: {
      type: "string",
      nullable: false,
      description: "Código postal (CEP).",
      "x-unispec-constraint-cep": true,
    },
    logradouro: {
      type: "string",
      nullable: false,
      description: "Logradouro.",
    },
    numero: {
      type: "integer",
      nullable: false,
      description: "Número.",
      minimum: 0,
      maximum: 99999,
    },
    bairro: {
      type: "string",
      nullable: false,
      description: "Bairro.",
    },
    complemento: {
      type: "string",
      nullable: true,
      description: "Complemento.",
    },
    pontoReferencia: {
      type: "string",
      nullable: true,
      description: "Ponto de referência.",
    },
    cidade: {
      nullable: false,
      description: "Visão FindOne de uma cidade.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CidadeFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "cep", "logradouro", "numero", "bairro", "complemento", "pontoReferencia", "cidade", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $CampusFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nomeFantasia: {
      type: "string",
      nullable: false,
      description: "Nome fantasia do campus.",
      minLength: 1,
    },
    razaoSocial: {
      type: "string",
      nullable: false,
      description: "Razão social do campus.",
      minLength: 1,
    },
    apelido: {
      type: "string",
      nullable: false,
      description: "Apelido do campus.",
      minLength: 1,
    },
    cnpj: {
      type: "string",
      nullable: false,
      description: "CNPJ do campus.",
      minLength: 1,
    },
    endereco: {
      nullable: false,
      description: "Visão FindOne de um endereço.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/EnderecoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nomeFantasia", "razaoSocial", "apelido", "cnpj", "endereco", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $ArquivoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    name: {
      type: "string",
      nullable: true,
      description: "Nome do arquivo.",
    },
    mimeType: {
      type: "string",
      nullable: true,
      description: "Formato do arquivo.",
    },
    sizeBytes: {
      type: "integer",
      nullable: true,
      description: "Tamanho do arquivo (em bytes).",
    },
    storageType: {
      type: "string",
      nullable: false,
      description: "Estratégia de armazenamento do conteúdo.",
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "name", "mimeType", "sizeBytes", "storageType", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $ImagemArquivoFindOneFromImagemResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    largura: {
      type: "integer",
      nullable: false,
      description: "Largura da imagem.",
    },
    altura: {
      type: "integer",
      nullable: false,
      description: "Altura da imagem.",
    },
    formato: {
      type: "string",
      nullable: false,
      description: "Formato da imagem.",
    },
    mimeType: {
      type: "string",
      nullable: false,
      description: "Mime-type da imagem.",
    },
    arquivo: {
      nullable: false,
      description: "Dados de saída para encontrar um arquivo por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ArquivoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "largura", "altura", "formato", "mimeType", "arquivo", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $ImagemFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    descricao: {
      type: "string",
      nullable: true,
      description: "Descrição da imagem.",
    },
    versoes: {
      nullable: false,
      description: "Visão FindOneFromImagem de uma versão de imagem.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/ImagemArquivoFindOneFromImagemResultView",
      },
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "descricao", "versoes", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $BlocoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do Bloco.",
      minLength: 1,
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do Bloco.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Visão FindOne de um campus.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneResultView",
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "codigo", "campus", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $AmbienteFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do ambiente/sala.",
      minLength: 1,
    },
    descricao: {
      type: "string",
      nullable: true,
      description: "Descrição do ambiente/sala.",
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do ambiente/sala.",
      minLength: 1,
    },
    capacidade: {
      type: "integer",
      nullable: true,
      description: "Capacidade do ambiente/sala.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.",
    },
    bloco: {
      nullable: false,
      description: "Visão FindOne de um bloco.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/BlocoFindOneResultView",
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "descricao", "codigo", "capacidade", "tipo", "bloco", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $UsuarioFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: true,
      description: "Nome do usuário.",
      minLength: 1,
    },
    matriculaSiape: {
      type: "string",
      nullable: true,
      description: "Matrícula SIAPE do usuário.",
      minLength: 1,
    },
    email: {
      type: "string",
      nullable: true,
      description: "E-mail do usuário.",
      format: "email",
    },
    isSuperUser: {
      type: "boolean",
      nullable: false,
      description: "Diz que o usuário tem poderes de administrador.",
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    imagemPerfil: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "matriculaSiape", "email", "isSuperUser", "imagemCapa", "imagemPerfil", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $PerfilFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    ativo: {
      type: "boolean",
      nullable: false,
      description: "Indica se o vínculo está ativo.",
    },
    cargo: {
      type: "string",
      nullable: false,
      description: "Cargo do usuário no vínculo.",
    },
    campus: {
      nullable: false,
      description: "Visão FindOne de um campus.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneResultView",
        },
      ],
    },
    usuario: {
      nullable: false,
      description: "Visão FindOne de um Usuário.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "ativo", "cargo", "campus", "usuario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $AuthWhoAmIInputView = {
  type: "object",
  properties: {
    usuario: {
      nullable: true,
      description: "Usuário autenticado.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneResultView",
        },
      ],
    },
    perfisAtivos: {
      nullable: false,
      description: "Visão FindOne de um Vínculo.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/PerfilFindOneResultView",
      },
    },
  },
  required: ["usuario", "perfisAtivos"],
} as const;

export const $AuthLoginInputView = {
  type: "object",
  properties: {
    matriculaSiape: {
      type: "string",
      nullable: false,
      description: "Matrícula SIAPE.",
    },
    senha: {
      type: "string",
      nullable: false,
      description: "Senha do usuário.",
    },
  },
  required: ["matriculaSiape", "senha"],
} as const;

export const $AuthSessionCredentialsView = {
  type: "object",
  properties: {
    access_token: {
      type: "string",
      nullable: true,
      description: "Token de acesso.",
    },
    token_type: {
      type: "string",
      nullable: true,
      description: "Tipo do token.",
    },
    id_token: {
      type: "string",
      nullable: true,
      description: "Token de identificação.",
    },
    refresh_token: {
      type: "string",
      nullable: true,
      description: "Token de refresh.",
    },
    expires_in: {
      type: "integer",
      nullable: true,
      description: "Tempo de expiração do token.",
    },
    expires_at: {
      type: "integer",
      nullable: true,
      description: "Tempo de expiração do token.",
    },
    session_state: {
      type: "string",
      nullable: true,
      description: "Estado da sessão.",
    },
    scope: {
      type: "string",
      nullable: true,
      description: "Escopo da autenticação.",
    },
  },
  required: ["access_token", "token_type", "id_token", "refresh_token", "expires_in", "expires_at", "session_state", "scope"],
} as const;

export const $AuthRefreshInputView = {
  type: "object",
  properties: {
    refreshToken: {
      type: "string",
      nullable: false,
      description: "Token de refresh.",
    },
  },
  required: ["refreshToken"],
} as const;

export const $AuthSetInitialPasswordInputView = {
  type: "object",
  properties: {
    matriculaSiape: {
      type: "string",
      nullable: false,
      description: "Matrícula SIAPE.",
    },
    senha: {
      type: "string",
      nullable: false,
      description: "Nova senha.",
    },
  },
  required: ["matriculaSiape", "senha"],
} as const;

export const $PaginatedResultMetaView = {
  type: "object",
  properties: {
    itemsPerPage: {
      type: "integer",
      nullable: false,
      description: "Quantidade de itens por página.",
    },
    totalItems: {
      type: "integer",
      nullable: false,
      description: "Total de itens.",
    },
    currentPage: {
      type: "integer",
      nullable: false,
      description: "Página atual.",
    },
    totalPages: {
      type: "integer",
      nullable: false,
      description: "Quantidade total de páginas.",
    },
    search: {
      type: "string",
      nullable: false,
      description: "Termo textual da busca.",
    },
    sortBy: {
      type: "array",
      nullable: false,
      description: "Ordenação.",
      items: {
        nullable: false,
        description: "Configuração de ordenação de uma propriedade.",
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "ladesa://schemas/v3/generics/PaginationSortByView.json",
        type: "object",
        properties: {
          property: {
            type: "string",
            pattern: "^[\\D\\.]+$",
            description: "Propriedade ordenada.",
          },
          mode: {
            type: "string",
            pattern: "^(ASC|DESC)$",
            description: "Modo de ordenação.",
          },
        },
        required: ["property", "mode"],
        deprecated: true,
        "x-unispec-kind": "entity",
        "x-unispec-entity-id": "PaginatedSortByView",
        additionalProperties: false,
      },
    },
    filter: {
      type: "array",
      nullable: false,
      description: "Filtros.",
      items: {
        nullable: false,
        description: "Configuração de filtro por restrições de uma propriedade.",
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "ladesa://schemas/v3/generics/PaginationFilterView.json",
        type: "object",
        properties: {
          property: {
            type: "string",
            description: "Propriedade filtrada.",
          },
          restrictions: {
            type: "array",
            items: {
              type: "string",
            },
            description: "Restrições de filtragem.",
          },
        },
        required: ["property", "restrictions"],
        deprecated: true,
        "x-unispec-kind": "entity",
        "x-unispec-entity-id": "PaginatedFilterView",
        additionalProperties: false,
      },
    },
  },
  required: ["itemsPerPage", "totalItems", "currentPage", "totalPages", "search", "sortBy", "filter"],
} as const;

export const $PaginatedResultLinksView = {
  type: "object",
  properties: {
    first: {
      type: "string",
      nullable: true,
    },
    previous: {
      type: "string",
      nullable: true,
    },
    current: {
      type: "string",
      nullable: true,
    },
    next: {
      type: "string",
      nullable: true,
    },
    last: {
      type: "string",
      nullable: true,
    },
  },
  required: ["first", "previous", "current", "next", "last"],
} as const;

export const $UsuarioListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um Usuário.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/UsuarioFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $UsuarioInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: true,
      description: "Nome do usuário.",
      minLength: 1,
    },
    matriculaSiape: {
      type: "string",
      nullable: true,
      description: "Matrícula SIAPE do usuário.",
      minLength: 1,
    },
    email: {
      type: "string",
      nullable: true,
      description: "E-mail do usuário.",
      format: "email",
    },
  },
  required: ["nome", "matriculaSiape", "email"],
} as const;

export const $UsuarioInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: true,
      description: "Nome do usuário.",
      minLength: 1,
    },
    matriculaSiape: {
      type: "string",
      nullable: true,
      description: "Matrícula SIAPE do usuário.",
      minLength: 1,
    },
    email: {
      type: "string",
      nullable: true,
      description: "E-mail do usuário.",
      format: "email",
    },
  },
} as const;

export const $PerfilListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um Vínculo.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/PerfilFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CampusFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Campus",
    },
  },
  required: ["id"],
} as const;

export const $UsuarioFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Usuario",
    },
  },
  required: ["id"],
} as const;

export const $PerfilInputUpdateView = {
  type: "object",
  properties: {
    cargos: {
      type: "array",
      nullable: false,
      description: "Cargos do usuário no vínculo.",
      items: {
        nullable: false,
        type: "string",
      },
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
    usuario: {
      nullable: false,
      description: "Dados de entrada para encontrar um Usuário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneInputView",
        },
      ],
    },
  },
  required: ["cargos", "campus", "usuario"],
} as const;

export const $CampusListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um campus.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/CampusFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CidadeFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
      description: "Identificador do registro (numérico).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/numeric_id.json",
      minimum: 1,
    },
  },
  required: ["id"],
} as const;

export const $EnderecoInputView = {
  type: "object",
  properties: {
    cep: {
      type: "string",
      nullable: false,
      description: "Código postal (CEP).",
      "x-unispec-constraint-cep": true,
    },
    logradouro: {
      type: "string",
      nullable: false,
      description: "Logradouro.",
    },
    numero: {
      type: "integer",
      nullable: false,
      description: "Número.",
      minimum: 0,
      maximum: 99999,
    },
    bairro: {
      type: "string",
      nullable: false,
      description: "Bairro.",
    },
    complemento: {
      type: "string",
      nullable: true,
      description: "Complemento.",
    },
    pontoReferencia: {
      type: "string",
      nullable: true,
      description: "Ponto de referência.",
    },
    cidade: {
      nullable: false,
      description: "Dados de entrada para encontrar uma cidade por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CidadeFindOneInputView",
        },
      ],
    },
  },
  required: ["cep", "logradouro", "numero", "bairro", "complemento", "pontoReferencia", "cidade"],
} as const;

export const $CampusInputCreateView = {
  type: "object",
  properties: {
    nomeFantasia: {
      type: "string",
      nullable: false,
      description: "Nome fantasia do campus.",
      minLength: 1,
    },
    razaoSocial: {
      type: "string",
      nullable: false,
      description: "Razão social do campus.",
      minLength: 1,
    },
    apelido: {
      type: "string",
      nullable: false,
      description: "Apelido do campus.",
      minLength: 1,
    },
    cnpj: {
      type: "string",
      nullable: false,
      description: "CNPJ do campus.",
      minLength: 1,
    },
    endereco: {
      nullable: false,
      description: "Dados de entrada para um endereco.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/EnderecoInputView",
        },
      ],
    },
  },
  required: ["nomeFantasia", "razaoSocial", "apelido", "cnpj", "endereco"],
} as const;

export const $CampusInputUpdateView = {
  type: "object",
  properties: {
    nomeFantasia: {
      type: "string",
      nullable: false,
      description: "Nome fantasia do campus.",
      minLength: 1,
    },
    razaoSocial: {
      type: "string",
      nullable: false,
      description: "Razão social do campus.",
      minLength: 1,
    },
    apelido: {
      type: "string",
      nullable: false,
      description: "Apelido do campus.",
      minLength: 1,
    },
    cnpj: {
      type: "string",
      nullable: false,
      description: "CNPJ do campus.",
      minLength: 1,
    },
    endereco: {
      nullable: false,
      description: "Dados de entrada para um endereco.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/EnderecoInputView",
        },
      ],
    },
  },
} as const;

export const $ModalidadeFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    slug: {
      type: "string",
      nullable: false,
      description: "Apelido da modalidade.",
      minLength: 1,
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "slug", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $ModalidadeListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma modalidade.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/ModalidadeFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $ModalidadeInputCreateView = {
  type: "object",
  properties: {
    slug: {
      type: "string",
      nullable: false,
      description: "Apelido da modalidade.",
      minLength: 1,
    },
  },
  required: ["slug"],
} as const;

export const $ModalidadeInputUpdateView = {
  type: "object",
  properties: {
    slug: {
      type: "string",
      nullable: false,
      description: "Apelido da modalidade.",
      minLength: 1,
    },
  },
} as const;

export const $EstadoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um estado.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/EstadoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CidadeListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma cidade.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/CidadeFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $BlocoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um bloco.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/BlocoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $BlocoInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do Bloco.",
      minLength: 1,
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do Bloco.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
  },
  required: ["nome", "codigo", "campus"],
} as const;

export const $BlocoInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do Bloco.",
      minLength: 1,
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do Bloco.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $AmbienteListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um ambiente.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/AmbienteFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $BlocoFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Bloco",
    },
  },
  required: ["id"],
} as const;

export const $AmbienteInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do ambiente/sala.",
      minLength: 1,
    },
    descricao: {
      type: "string",
      nullable: true,
      description: "Descrição do ambiente/sala.",
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do ambiente/sala.",
      minLength: 1,
    },
    capacidade: {
      type: "integer",
      nullable: true,
      description: "Capacidade do ambiente/sala.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.",
    },
    bloco: {
      nullable: false,
      description: "Dados de entrada para encontrar um bloco por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/BlocoFindOneInputView",
        },
      ],
    },
  },
  required: ["nome", "descricao", "codigo", "capacidade", "tipo", "bloco"],
} as const;

export const $AmbienteInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do ambiente/sala.",
      minLength: 1,
    },
    descricao: {
      type: "string",
      nullable: true,
      description: "Descrição do ambiente/sala.",
    },
    codigo: {
      type: "string",
      nullable: false,
      description: "Código do ambiente/sala.",
      minLength: 1,
    },
    capacidade: {
      type: "integer",
      nullable: true,
      description: "Capacidade do ambiente/sala.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do ambiente/sala. Ex.: sala aula, auditório, laboratório de química.",
    },
    bloco: {
      nullable: false,
      description: "Dados de entrada para encontrar um bloco por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/BlocoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $ReservaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    situacao: {
      type: "string",
      nullable: false,
      description: "Situação da reserva.",
      minLength: 1,
    },
    motivo: {
      type: "string",
      nullable: true,
      description: "Motivo da reserva.",
      minLength: 1,
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo da reserva.",
      minLength: 1,
    },
    rrule: {
      type: "string",
      nullable: false,
      description: "Regra RRule para a recorrência da reserva. Segue a RFC 5545 do iCalendar.",
    },
    usuario: {
      nullable: false,
      description: "Visão FindOne de um Usuário.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneResultView",
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: "Visão FindOne de um ambiente.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "situacao", "motivo", "tipo", "rrule", "usuario", "ambiente", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $ReservaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma Reserva.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/ReservaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $AmbienteFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Ambiente",
    },
  },
  required: ["id"],
} as const;

export const $ReservaInputCreateView = {
  type: "object",
  properties: {
    situacao: {
      type: "string",
      nullable: false,
      description: "Situação da reserva.",
      minLength: 1,
    },
    motivo: {
      type: "string",
      nullable: true,
      description: "Motivo da reserva.",
      minLength: 1,
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo da reserva.",
      minLength: 1,
    },
    rrule: {
      type: "string",
      nullable: false,
      description: "Regra RRule para a recorrência da reserva. Segue a RFC 5545 do iCalendar.",
    },
    usuario: {
      nullable: false,
      description: "Dados de entrada para encontrar um Usuário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneInputView",
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
  required: ["situacao", "motivo", "tipo", "rrule", "usuario", "ambiente"],
} as const;

export const $ReservaInputUpdateView = {
  type: "object",
  properties: {
    situacao: {
      type: "string",
      nullable: false,
      description: "Situação da reserva.",
      minLength: 1,
    },
    motivo: {
      type: "string",
      nullable: true,
      description: "Motivo da reserva.",
      minLength: 1,
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo da reserva.",
      minLength: 1,
    },
    rrule: {
      type: "string",
      nullable: false,
      description: "Regra RRule para a recorrência da reserva. Segue a RFC 5545 do iCalendar.",
    },
    usuario: {
      nullable: false,
      description: "Dados de entrada para encontrar um Usuário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/UsuarioFindOneInputView",
        },
      ],
    },
    ambiente: {
      nullable: false,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $OfertaFormacaoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome da oferta de formação.",
      minLength: 1,
    },
    slug: {
      type: "string",
      nullable: false,
      description: "Apelido da oferta de formação.",
      minLength: 1,
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "slug", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $CursoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do curso.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado do curso.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Visão FindOne de um campus.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneResultView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Visão FindOne de uma oferta de formação.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneResultView",
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "nomeAbreviado", "campus", "ofertaFormacao", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $CursoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um Curso.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/CursoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $OfertaFormacaoFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "OfertaFormacao",
    },
  },
  required: ["id"],
} as const;

export const $CursoInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do curso.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado do curso.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Dados de entrada para encontrar uma oferta de formação por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneInputView",
        },
      ],
    },
  },
  required: ["nome", "nomeAbreviado", "campus", "ofertaFormacao"],
} as const;

export const $CursoInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do curso.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado do curso.",
      minLength: 1,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Dados de entrada para encontrar uma oferta de formação por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $DisciplinaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome da disciplina.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado da disciplina.",
      minLength: 1,
    },
    cargaHoraria: {
      type: "integer",
      nullable: false,
      description: "Carga horária da disciplina.",
      minimum: 1,
      maximum: 65535,
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "nomeAbreviado", "cargaHoraria", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $DisciplinaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma Disciplina.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/DisciplinaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $DisciplinaInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome da disciplina.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado da disciplina.",
      minLength: 1,
    },
    cargaHoraria: {
      type: "integer",
      nullable: false,
      description: "Carga horária da disciplina.",
      minimum: 1,
      maximum: 65535,
    },
  },
  required: ["nome", "nomeAbreviado", "cargaHoraria"],
} as const;

export const $DisciplinaInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome da disciplina.",
      minLength: 1,
    },
    nomeAbreviado: {
      type: "string",
      nullable: false,
      description: "Nome abreviado da disciplina.",
      minLength: 1,
    },
    cargaHoraria: {
      type: "integer",
      nullable: false,
      description: "Carga horária da disciplina.",
      minimum: 1,
      maximum: 65535,
    },
  },
} as const;

export const $TurmaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    periodo: {
      type: "string",
      nullable: false,
      description: "Período da Turma.",
      minLength: 1,
    },
    curso: {
      nullable: false,
      description: "Visão FindOne de um Curso.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CursoFindOneResultView",
        },
      ],
    },
    ambientePadraoAula: {
      nullable: true,
      description: "Visão FindOne de um ambiente.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneResultView",
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "periodo", "curso", "ambientePadraoAula", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $TurmaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma Turma.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/TurmaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CursoFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Curso",
    },
  },
  required: ["id"],
} as const;

export const $TurmaInputCreateView = {
  type: "object",
  properties: {
    periodo: {
      type: "string",
      nullable: false,
      description: "Período da Turma.",
      minLength: 1,
    },
    curso: {
      nullable: false,
      description: "Dados de entrada para encontrar um Curso por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CursoFindOneInputView",
        },
      ],
    },
    ambientePadraoAula: {
      nullable: false,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
  required: ["periodo", "curso", "ambientePadraoAula"],
} as const;

export const $TurmaInputUpdateView = {
  type: "object",
  properties: {
    periodo: {
      type: "string",
      nullable: false,
      description: "Período da Turma.",
      minLength: 1,
    },
    curso: {
      nullable: false,
      description: "Dados de entrada para encontrar um Curso por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CursoFindOneInputView",
        },
      ],
    },
    ambientePadraoAula: {
      nullable: false,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $CalendarioLetivoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do calendário letivo.",
    },
    ano: {
      type: "integer",
      nullable: false,
      description: "Ano do calendário letivo.",
      minimum: 0,
      maximum: 65535,
    },
    campus: {
      nullable: false,
      description: "Visão FindOne de um campus.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneResultView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Visão FindOne de uma oferta de formação.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "ano", "campus", "ofertaFormacao", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $CalendarioLetivoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CalendarioLetivoInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do calendário letivo.",
    },
    ano: {
      type: "integer",
      nullable: false,
      description: "Ano do calendário letivo.",
      minimum: 0,
      maximum: 65535,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Dados de entrada para encontrar uma oferta de formação por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneInputView",
        },
      ],
    },
  },
  required: ["nome", "ano", "campus", "ofertaFormacao"],
} as const;

export const $CalendarioLetivoInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: false,
      description: "Nome do calendário letivo.",
    },
    ano: {
      type: "integer",
      nullable: false,
      description: "Ano do calendário letivo.",
      minimum: 0,
      maximum: 65535,
    },
    campus: {
      nullable: false,
      description: "Dados de entrada para encontrar um campus por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CampusFindOneInputView",
        },
      ],
    },
    ofertaFormacao: {
      nullable: false,
      description: "Dados de entrada para encontrar uma oferta de formação por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/OfertaFormacaoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $EventoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    nome: {
      type: "string",
      nullable: true,
      description: "Nome do evento.",
    },
    rrule: {
      type: "string",
      nullable: false,
      description: "Regra RRule para a recorrência do evento. Segue a RFC 5545 do iCalendar.",
    },
    cor: {
      type: "string",
      nullable: true,
      description: "Cor da Evento.",
    },
    calendario: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "nome", "rrule", "cor", "calendario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $EventoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um Evento.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/EventoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $CalendarioLetivoFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "CalendarioLetivo",
    },
  },
  required: ["id"],
} as const;

export const $EventoInputCreateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: true,
    },
    rrule: {
      type: "string",
      nullable: false,
    },
    cor: {
      type: "string",
      nullable: true,
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
  required: ["nome", "rrule", "cor", "calendario"],
} as const;

export const $EventoInputUpdateView = {
  type: "object",
  properties: {
    nome: {
      type: "string",
      nullable: true,
    },
    rrule: {
      type: "string",
      nullable: false,
    },
    cor: {
      type: "string",
      nullable: true,
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $DiaCalendarioFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    data: {
      type: "string",
      nullable: false,
      description: "Data.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    diaLetivo: {
      type: "boolean",
      nullable: false,
      description: "Define que o dia é letivo.",
    },
    feriado: {
      type: "boolean",
      nullable: false,
      description: "Define que o dia é feriado.",
    },
    calendario: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "data", "diaLetivo", "feriado", "calendario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $DiaCalendarioListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um DiaCalendario.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/DiaCalendarioFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $DiaCalendarioInputCreateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    feriado: {
      type: "boolean",
      nullable: false,
    },
    diaLetivo: {
      type: "boolean",
      nullable: false,
    },
    calendario: {
      nullable: true,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
  required: ["data", "feriado", "diaLetivo", "calendario"],
} as const;

export const $DiaCalendarioInputUpdateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    feriado: {
      type: "boolean",
      nullable: false,
    },
    diaLetivo: {
      type: "boolean",
      nullable: false,
    },
    calendario: {
      nullable: true,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $DiarioFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    ativo: {
      type: "boolean",
      nullable: false,
      description: "Situação do diário.",
    },
    calendarioLetivo: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
        },
      ],
    },
    turma: {
      nullable: false,
      description: "Visão FindOne de uma Turma.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/TurmaFindOneResultView",
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: "Visão FindOne de uma Disciplina.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DisciplinaFindOneResultView",
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: "Visão FindOne de um ambiente.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneResultView",
        },
      ],
    },
    imagemCapa: {
      nullable: true,
      description: "Visão FindOne de uma imagem.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/ImagemFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "ativo", "calendarioLetivo", "turma", "disciplina", "ambientePadrao", "imagemCapa", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $DiarioListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um diário.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/DiarioFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $TurmaFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Turma",
    },
  },
  required: ["id"],
} as const;

export const $DisciplinaFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Disciplina",
    },
  },
  required: ["id"],
} as const;

export const $DiarioInputCreateView = {
  type: "object",
  properties: {
    ativo: {
      type: "boolean",
      nullable: false,
    },
    calendarioLetivo: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
    turma: {
      nullable: false,
      description: "Dados de entrada para encontrar uma Turma por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/TurmaFindOneInputView",
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: "Dados de entrada para encontrar uma Disciplina por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DisciplinaFindOneInputView",
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
  required: ["ativo", "calendarioLetivo", "turma", "disciplina", "ambientePadrao"],
} as const;

export const $DiarioInputUpdateView = {
  type: "object",
  properties: {
    ativo: {
      type: "boolean",
      nullable: false,
    },
    calendarioLetivo: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
    turma: {
      nullable: false,
      description: "Dados de entrada para encontrar uma Turma por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/TurmaFindOneInputView",
        },
      ],
    },
    disciplina: {
      nullable: false,
      description: "Dados de entrada para encontrar uma Disciplina por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DisciplinaFindOneInputView",
        },
      ],
    },
    ambientePadrao: {
      nullable: true,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $DiarioProfessorFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    situacao: {
      type: "boolean",
      nullable: false,
      description: "Situação do vínculo.",
    },
    perfil: {
      nullable: false,
      description: "Visão FindOne de um Vínculo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PerfilFindOneResultView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Visão FindOne de um diário.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "situacao", "perfil", "diario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $DiarioProfessorListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um DiarioProfessor.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/DiarioProfessorFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $PerfilFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Perfil",
    },
  },
  required: ["id"],
} as const;

export const $DiarioFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "Diario",
    },
  },
  required: ["id"],
} as const;

export const $DiarioProfessorInputCreateView = {
  type: "object",
  properties: {
    situacao: {
      type: "boolean",
      nullable: false,
    },
    perfil: {
      nullable: false,
      description: "Dados de entrada para encontrar um Vínculo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PerfilFindOneInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
  },
  required: ["situacao", "perfil", "diario"],
} as const;

export const $DiarioProfessorInputUpdateView = {
  type: "object",
  properties: {
    situacao: {
      type: "boolean",
      nullable: false,
    },
    perfil: {
      nullable: false,
      description: "Dados de entrada para encontrar um Vínculo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PerfilFindOneInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $EtapaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    numero: {
      type: "integer",
      nullable: true,
      description: "Número da etapa.",
      minimum: 0,
      maximum: 255,
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Data de início.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataTermino: {
      type: "string",
      nullable: false,
      description: "Data de término.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    cor: {
      type: "string",
      nullable: true,
      description: "Cor da etapa.",
    },
    calendario: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "numero", "dataInicio", "dataTermino", "cor", "calendario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $EtapaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma Etapa.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/EtapaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $EtapaInputCreateView = {
  type: "object",
  properties: {
    numero: {
      type: "integer",
      nullable: true,
      minimum: 0,
      maximum: 255,
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataTermino: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    cor: {
      type: "string",
      nullable: true,
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
  required: ["numero", "dataInicio", "dataTermino", "cor", "calendario"],
} as const;

export const $EtapaInputUpdateView = {
  type: "object",
  properties: {
    numero: {
      type: "integer",
      nullable: true,
      minimum: 0,
      maximum: 255,
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataTermino: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    cor: {
      type: "string",
      nullable: true,
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $IntervaloDeTempoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    periodoInicio: {
      type: "string",
      nullable: false,
      description: "Horário que o intervalo de tempo inicia.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/time.json",
      format: "time",
    },
    periodoFim: {
      type: "string",
      nullable: false,
      description: "Horário que o intervalo de tempo termina.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/time.json",
      format: "time",
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "periodoInicio", "periodoFim", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $AulaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    data: {
      type: "string",
      nullable: false,
      description: "Data da aula.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    modalidade: {
      type: "string",
      nullable: true,
      description: "Modalidade da aula.",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Visão FindOne de um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoFindOneResultView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Visão FindOne de um diário.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneResultView",
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: "Visão FindOne de um ambiente.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "data", "modalidade", "intervaloDeTempo", "diario", "ambiente", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $AulaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de uma Aula.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/AulaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $IntervaloDeTempoInputView = {
  type: "object",
  properties: {
    periodoInicio: {
      type: "string",
      nullable: false,
      description: "Horário que o intervalo de tempo inicia.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/time.json",
      format: "time",
    },
    periodoFim: {
      type: "string",
      nullable: false,
      description: "Horário que o intervalo de tempo termina.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/time.json",
      format: "time",
    },
  },
  required: ["periodoInicio", "periodoFim"],
} as const;

export const $AulaInputCreateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    modalidade: {
      type: "string",
      nullable: true,
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
  required: ["data", "modalidade", "intervaloDeTempo", "diario", "ambiente"],
} as const;

export const $AulaInputUpdateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Date ISO 8601.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    modalidade: {
      type: "string",
      nullable: true,
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
    ambiente: {
      nullable: true,
      description: "Dados de entrada para encontrar um ambiente por id.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/AmbienteFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $DiarioPreferenciaAgrupamentoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Início da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    diaSemanaIso: {
      type: "integer",
      nullable: false,
      description: "Dia da semana.",
      minimum: 0,
      maximum: 255,
    },
    aulasSeguidas: {
      type: "integer",
      nullable: false,
      description: "Quantidade de aulas seguidas.",
      minimum: 0,
      maximum: 255,
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Visão FindOne de um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoFindOneResultView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Visão FindOne de um diário.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "dataInicio", "dataFim", "diaSemanaIso", "aulasSeguidas", "intervaloDeTempo", "diario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $DiarioPreferenciaAgrupamentoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um DiarioPreferenciaAgrupamento.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/DiarioPreferenciaAgrupamentoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $DiarioPreferenciaAgrupamentoInputCreateView = {
  type: "object",
  properties: {
    diaSemanaIso: {
      type: "integer",
      nullable: false,
      description: "Dia da semana.",
      minimum: 0,
      maximum: 255,
    },
    aulasSeguidas: {
      type: "integer",
      nullable: false,
      description: "Quantidade de aulas seguidas.",
      minimum: 0,
      maximum: 255,
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Início da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
  },
  required: ["diaSemanaIso", "aulasSeguidas", "dataInicio", "dataFim", "intervaloDeTempo", "diario"],
} as const;

export const $DiarioPreferenciaAgrupamentoInputUpdateView = {
  type: "object",
  properties: {
    diaSemanaIso: {
      type: "integer",
      nullable: false,
      description: "Dia da semana.",
      minimum: 0,
      maximum: 255,
    },
    aulasSeguidas: {
      type: "integer",
      nullable: false,
      description: "Quantidade de aulas seguidas.",
      minimum: 0,
      maximum: 255,
    },
    dataInicio: {
      type: "string",
      nullable: false,
      description: "Início da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    dataFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência da preferência de agrupamento.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diario: {
      nullable: false,
      description: "Dados de entrada para encontrar um diário por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $HorarioGeradoFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    status: {
      type: "string",
      nullable: true,
      description: "Status do horário gerado.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do horário gerado.",
    },
    dataGeracao: {
      type: "string",
      nullable: true,
      description: "Data em que o horário foi gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
    vigenciaInicio: {
      type: "string",
      nullable: true,
      description: "Início da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    vigenciaFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    calendario: {
      nullable: false,
      description: "Visão FindOne de um calendário letivo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneResultView",
        },
      ],
    },
    dateCreated: {
      type: "string",
      nullable: false,
      description: "Data e hora da criação do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateUpdated: {
      type: "string",
      nullable: false,
      description: "Data e hora da alteração do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date_time.json",
      format: "date-time",
    },
    dateDeleted: {
      type: "string",
      nullable: true,
      description: "Data e hora da exclusão do registro.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
  },
  required: ["id", "status", "tipo", "dataGeracao", "vigenciaInicio", "vigenciaFim", "calendario", "dateCreated", "dateUpdated", "dateDeleted"],
} as const;

export const $HorarioGeradoListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um HorarioGerado.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/HorarioGeradoFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $HorarioGeradoInputCreateView = {
  type: "object",
  properties: {
    status: {
      type: "string",
      nullable: true,
      description: "Status do horário gerado.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do horário gerado.",
    },
    dataGeracao: {
      type: "string",
      nullable: true,
      description: "Data em que o horário foi gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
    vigenciaInicio: {
      type: "string",
      nullable: true,
      description: "Início da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    vigenciaFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
  required: ["status", "tipo", "dataGeracao", "vigenciaInicio", "vigenciaFim", "calendario"],
} as const;

export const $HorarioGeradoInputUpdateView = {
  type: "object",
  properties: {
    status: {
      type: "string",
      nullable: true,
      description: "Status do horário gerado.",
    },
    tipo: {
      type: "string",
      nullable: true,
      description: "Tipo do horário gerado.",
    },
    dataGeracao: {
      type: "string",
      nullable: true,
      description: "Data em que o horário foi gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date-time",
    },
    vigenciaInicio: {
      type: "string",
      nullable: true,
      description: "Início da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    vigenciaFim: {
      type: "string",
      nullable: true,
      description: "Fim da vigência do horário gerado.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      format: "date",
    },
    calendario: {
      nullable: false,
      description: "Dados de entrada para encontrar um calendário letivo por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/CalendarioLetivoFindOneInputView",
        },
      ],
    },
  },
} as const;

export const $HorarioGeradoAulaFindOneResultView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
    },
    data: {
      type: "string",
      nullable: false,
      description: "Data da aula gerada.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Visão FindOne de um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoFindOneResultView",
        },
      ],
    },
    diarioProfessor: {
      nullable: false,
      description: "Visão FindOne de um DiarioProfessor.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioProfessorFindOneResultView",
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: "Visão FindOne de um HorarioGerado.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/HorarioGeradoFindOneResultView",
        },
      ],
    },
  },
  required: ["id", "data", "intervaloDeTempo", "diarioProfessor", "horarioGerado"],
} as const;

export const $HorarioGeradoAulaListResultView = {
  type: "object",
  properties: {
    meta: {
      nullable: false,
      description: "Metadados da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultMetaView",
        },
      ],
    },
    data: {
      nullable: false,
      description: "Visão FindOne de um HorarioGeradoAula.",
      kind: "type",
      type: "array",
      items: {
        $ref: "#/components/schemas/HorarioGeradoAulaFindOneResultView",
      },
    },
    links: {
      nullable: false,
      description: "Links da busca.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/PaginatedResultLinksView",
        },
      ],
    },
  },
  required: ["meta", "data", "links"],
} as const;

export const $DiarioProfessorFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "DiarioProfessor",
    },
  },
  required: ["id"],
} as const;

export const $HorarioGeradoFindOneInputView = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: false,
      description: "Identificador do registro (uuid).",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/uuid.json",
      format: "uuid",
      "x-unispec-constraint-entity-exists": "HorarioGerado",
    },
  },
  required: ["id"],
} as const;

export const $HorarioGeradoAulaInputCreateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Data da aula gerada.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diarioProfessor: {
      nullable: false,
      description: "Dados de entrada para encontrar um DiarioProfessor por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioProfessorFindOneInputView",
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: "Dados de entrada para encontrar um HorarioGerado por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/HorarioGeradoFindOneInputView",
        },
      ],
    },
  },
  required: ["data", "intervaloDeTempo", "diarioProfessor", "horarioGerado"],
} as const;

export const $HorarioGeradoAulaInputUpdateView = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: false,
      description: "Data da aula gerada.",
      $schema: "https://json-schema.org/draft/2020-12/schema",
      $id: "ladesa://schemas/v3/generics/date.json",
      format: "date",
    },
    intervaloDeTempo: {
      nullable: false,
      description: "Dados de entrada para um Intervalo de Tempo.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/IntervaloDeTempoInputView",
        },
      ],
    },
    diarioProfessor: {
      nullable: false,
      description: "Dados de entrada para encontrar um DiarioProfessor por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/DiarioProfessorFindOneInputView",
        },
      ],
    },
    horarioGerado: {
      nullable: false,
      description: "Dados de entrada para encontrar um HorarioGerado por ID.",
      kind: "type",
      allOf: [
        {
          $ref: "#/components/schemas/HorarioGeradoFindOneInputView",
        },
      ],
    },
  },
} as const;
