// This file is auto-generated by @hey-api/openapi-ts

import type { BaseHttpRequest } from "./core/BaseHttpRequest";
import type { CancelablePromise } from "./core/CancelablePromise";
import type {
  AmbienteCreateData,
  AmbienteCreateResponse,
  AmbienteDeleteOneByIdData,
  AmbienteDeleteOneByIdResponse,
  AmbienteFindOneByIdData,
  AmbienteFindOneByIdResponse,
  AmbienteGetImagemCapaData,
  AmbienteGetImagemCapaResponse,
  AmbienteListData,
  AmbienteListResponse,
  AmbienteSetImagemCapaData,
  AmbienteSetImagemCapaResponse,
  AmbienteUpdateOneByIdData,
  AmbienteUpdateOneByIdResponse,
  AppControllerGetHelloResponse,
  ArquivoGetFileData,
  ArquivoGetFileResponse,
  AulaCreateData,
  AulaCreateResponse,
  AulaDeleteOneByIdData,
  AulaDeleteOneByIdResponse,
  AulaFindOneByIdData,
  AulaFindOneByIdResponse,
  AulaListData,
  AulaListResponse,
  AulaUpdateOneByIdData,
  AulaUpdateOneByIdResponse,
  AuthLoginData,
  AuthLoginResponse,
  AuthRefreshData,
  AuthRefreshResponse,
  AuthSetInitialPasswordData,
  AuthSetInitialPasswordResponse,
  AuthWhoAmIResponse,
  BlocoCreateData,
  BlocoCreateResponse,
  BlocoDeleteOneByIdData,
  BlocoDeleteOneByIdResponse,
  BlocoFindOneByIdData,
  BlocoFindOneByIdResponse,
  BlocoGetImagemCapaData,
  BlocoGetImagemCapaResponse,
  BlocoListData,
  BlocoListResponse,
  BlocoSetImagemCapaData,
  BlocoSetImagemCapaResponse,
  BlocoUpdateOneByIdData,
  BlocoUpdateOneByIdResponse,
  CalendarioLetivoCreateData,
  CalendarioLetivoCreateResponse,
  CalendarioLetivoDeleteOneByIdData,
  CalendarioLetivoDeleteOneByIdResponse,
  CalendarioLetivoFindOneByIdData,
  CalendarioLetivoFindOneByIdResponse,
  CalendarioLetivoListData,
  CalendarioLetivoListResponse,
  CalendarioLetivoUpdateOneByIdData,
  CalendarioLetivoUpdateOneByIdResponse,
  CampusCreateData,
  CampusCreateResponse,
  CampusDeleteOneByIdData,
  CampusDeleteOneByIdResponse,
  CampusFindOneByIdData,
  CampusFindOneByIdResponse,
  CampusListData,
  CampusListResponse,
  CampusUpdateOneByIdData,
  CampusUpdateOneByIdResponse,
  CidadeFindOneByIdData,
  CidadeFindOneByIdResponse,
  CidadeListData,
  CidadeListResponse,
  CursoCreateData,
  CursoCreateResponse,
  CursoDeleteOneByIdData,
  CursoDeleteOneByIdResponse,
  CursoFindOneByIdData,
  CursoFindOneByIdResponse,
  CursoGetImagemCapaData,
  CursoGetImagemCapaResponse,
  CursoListData,
  CursoListResponse,
  CursoSetImagemCapaData,
  CursoSetImagemCapaResponse,
  CursoUpdateOneByIdData,
  CursoUpdateOneByIdResponse,
  DiaCalendarioCreateData,
  DiaCalendarioCreateResponse,
  DiaCalendarioDeleteOneByIdData,
  DiaCalendarioDeleteOneByIdResponse,
  DiaCalendarioFindOneByIdData,
  DiaCalendarioFindOneByIdResponse,
  DiaCalendarioListData,
  DiaCalendarioListResponse,
  DiaCalendarioUpdateOneByIdData,
  DiaCalendarioUpdateOneByIdResponse,
  DiarioCreateData,
  DiarioCreateResponse,
  DiarioDeleteOneByIdData,
  DiarioDeleteOneByIdResponse,
  DiarioFindOneByIdData,
  DiarioFindOneByIdResponse,
  DiarioListData,
  DiarioListResponse,
  DiarioPreferenciaAgrupamentoCreateData,
  DiarioPreferenciaAgrupamentoCreateResponse,
  DiarioPreferenciaAgrupamentoDeleteOneByIdData,
  DiarioPreferenciaAgrupamentoDeleteOneByIdResponse,
  DiarioPreferenciaAgrupamentoFindOneByIdData,
  DiarioPreferenciaAgrupamentoFindOneByIdResponse,
  DiarioPreferenciaAgrupamentoListData,
  DiarioPreferenciaAgrupamentoListResponse,
  DiarioPreferenciaAgrupamentoUpdateOneByIdData,
  DiarioPreferenciaAgrupamentoUpdateOneByIdResponse,
  DiarioProfessorCreateData,
  DiarioProfessorCreateResponse,
  DiarioProfessorDeleteOneByIdData,
  DiarioProfessorDeleteOneByIdResponse,
  DiarioProfessorFindOneByIdData,
  DiarioProfessorFindOneByIdResponse,
  DiarioProfessorListData,
  DiarioProfessorListResponse,
  DiarioProfessorUpdateOneByIdData,
  DiarioProfessorUpdateOneByIdResponse,
  DiarioUpdateOneByIdData,
  DiarioUpdateOneByIdResponse,
  DisciplinaCreateData,
  DisciplinaCreateResponse,
  DisciplinaDeleteOneByIdData,
  DisciplinaDeleteOneByIdResponse,
  DisciplinaFindOneByIdData,
  DisciplinaFindOneByIdResponse,
  DisciplinaGetImagemCapaData,
  DisciplinaGetImagemCapaResponse,
  DisciplinaListData,
  DisciplinaListResponse,
  DisciplinaSetImagemCapaData,
  DisciplinaSetImagemCapaResponse,
  DisciplinaUpdateOneByIdData,
  DisciplinaUpdateOneByIdResponse,
  DisponibilidadeCreateData,
  DisponibilidadeCreateResponse,
  DisponibilidadeDeleteOneByIdData,
  DisponibilidadeDeleteOneByIdResponse,
  DisponibilidadeFindOneByIdData,
  DisponibilidadeFindOneByIdResponse,
  DisponibilidadeListData,
  DisponibilidadeListResponse,
  DisponibilidadeUpdateOneByIdData,
  DisponibilidadeUpdateOneByIdResponse,
  EstadoFindOneByIdData,
  EstadoFindOneByIdResponse,
  EstadoListData,
  EstadoListResponse,
  EtapaCreateData,
  EtapaCreateResponse,
  EtapaDeleteOneByIdData,
  EtapaDeleteOneByIdResponse,
  EtapaFindOneByIdData,
  EtapaFindOneByIdResponse,
  EtapaListData,
  EtapaListResponse,
  EtapaUpdateOneByIdData,
  EtapaUpdateOneByIdResponse,
  EventoCreateData,
  EventoCreateResponse,
  EventoDeleteOneByIdData,
  EventoDeleteOneByIdResponse,
  EventoFindOneByIdData,
  EventoFindOneByIdResponse,
  EventoListData,
  EventoListResponse,
  EventoUpdateOneByIdData,
  EventoUpdateOneByIdResponse,
  GradeHorarioOfertaFormacaoCreateData,
  GradeHorarioOfertaFormacaoCreateResponse,
  GradeHorarioOfertaFormacaoDeleteOneByIdData,
  GradeHorarioOfertaFormacaoDeleteOneByIdResponse,
  GradeHorarioOfertaFormacaoFindOneByIdData,
  GradeHorarioOfertaFormacaoFindOneByIdResponse,
  GradeHorarioOfertaFormacaoIntervaloDeTempoCreateData,
  GradeHorarioOfertaFormacaoIntervaloDeTempoCreateResponse,
  GradeHorarioOfertaFormacaoIntervaloDeTempoDeleteOneByIdData,
  GradeHorarioOfertaFormacaoIntervaloDeTempoDeleteOneByIdResponse,
  GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneByIdData,
  GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneByIdResponse,
  GradeHorarioOfertaFormacaoIntervaloDeTempoListData,
  GradeHorarioOfertaFormacaoIntervaloDeTempoListResponse,
  GradeHorarioOfertaFormacaoIntervaloDeTempoUpdateOneByIdData,
  GradeHorarioOfertaFormacaoIntervaloDeTempoUpdateOneByIdResponse,
  GradeHorarioOfertaFormacaoListData,
  GradeHorarioOfertaFormacaoListResponse,
  GradeHorarioOfertaFormacaoUpdateOneByIdData,
  GradeHorarioOfertaFormacaoUpdateOneByIdResponse,
  HorarioGeradoAulaCreateData,
  HorarioGeradoAulaCreateResponse,
  HorarioGeradoAulaDeleteOneByIdData,
  HorarioGeradoAulaDeleteOneByIdResponse,
  HorarioGeradoAulaFindOneByIdData,
  HorarioGeradoAulaFindOneByIdResponse,
  HorarioGeradoAulaListData,
  HorarioGeradoAulaListResponse,
  HorarioGeradoAulaUpdateOneByIdData,
  HorarioGeradoAulaUpdateOneByIdResponse,
  HorarioGeradoCreateData,
  HorarioGeradoCreateResponse,
  HorarioGeradoDeleteOneByIdData,
  HorarioGeradoDeleteOneByIdResponse,
  HorarioGeradoFindOneByIdData,
  HorarioGeradoFindOneByIdResponse,
  HorarioGeradoListData,
  HorarioGeradoListResponse,
  HorarioGeradoUpdateOneByIdData,
  HorarioGeradoUpdateOneByIdResponse,
  ModalidadeCreateData,
  ModalidadeCreateResponse,
  ModalidadeDeleteOneByIdData,
  ModalidadeDeleteOneByIdResponse,
  ModalidadeFindOneByIdData,
  ModalidadeFindOneByIdResponse,
  ModalidadeListData,
  ModalidadeListResponse,
  ModalidadeUpdateOneByIdData,
  ModalidadeUpdateOneByIdResponse,
  NivelFormacaoCreateData,
  NivelFormacaoCreateResponse,
  NivelFormacaoDeleteOneByIdData,
  NivelFormacaoDeleteOneByIdResponse,
  NivelFormacaoFindOneByIdData,
  NivelFormacaoFindOneByIdResponse,
  NivelFormacaoListData,
  NivelFormacaoListResponse,
  NivelFormacaoUpdateOneByIdData,
  NivelFormacaoUpdateOneByIdResponse,
  OfertaFormacaoCreateData,
  OfertaFormacaoCreateResponse,
  OfertaFormacaoDeleteOneByIdData,
  OfertaFormacaoDeleteOneByIdResponse,
  OfertaFormacaoFindOneByIdData,
  OfertaFormacaoFindOneByIdResponse,
  OfertaFormacaoListData,
  OfertaFormacaoListResponse,
  OfertaFormacaoNivelFormacaoCreateData,
  OfertaFormacaoNivelFormacaoCreateResponse,
  OfertaFormacaoNivelFormacaoDeleteOneByIdData,
  OfertaFormacaoNivelFormacaoDeleteOneByIdResponse,
  OfertaFormacaoNivelFormacaoFindOneByIdData,
  OfertaFormacaoNivelFormacaoFindOneByIdResponse,
  OfertaFormacaoNivelFormacaoListData,
  OfertaFormacaoNivelFormacaoListResponse,
  OfertaFormacaoNivelFormacaoUpdateOneByIdData,
  OfertaFormacaoNivelFormacaoUpdateOneByIdResponse,
  OfertaFormacaoUpdateOneByIdData,
  OfertaFormacaoUpdateOneByIdResponse,
  PerfilListData,
  PerfilListResponse,
  PerfilUpdateOneByIdData,
  PerfilUpdateOneByIdResponse,
  ProfessorDisponibilidadeCreateData,
  ProfessorDisponibilidadeCreateResponse,
  ProfessorDisponibilidadeDeleteOneByIdData,
  ProfessorDisponibilidadeDeleteOneByIdResponse,
  ProfessorDisponibilidadeFindOneByIdData,
  ProfessorDisponibilidadeFindOneByIdResponse,
  ProfessorDisponibilidadeListData,
  ProfessorDisponibilidadeListResponse,
  ProfessorDisponibilidadeUpdateOneByIdData,
  ProfessorDisponibilidadeUpdateOneByIdResponse,
  ReservaCreateData,
  ReservaCreateResponse,
  ReservaDeleteOneByIdData,
  ReservaDeleteOneByIdResponse,
  ReservaFindOneByIdData,
  ReservaFindOneByIdResponse,
  ReservaListData,
  ReservaListResponse,
  ReservaUpdateOneByIdData,
  ReservaUpdateOneByIdResponse,
  TurmaCreateData,
  TurmaCreateResponse,
  TurmaDeleteOneByIdData,
  TurmaDeleteOneByIdResponse,
  TurmaDisponibilidadeCreateData,
  TurmaDisponibilidadeCreateResponse,
  TurmaDisponibilidadeDeleteOneByIdData,
  TurmaDisponibilidadeDeleteOneByIdResponse,
  TurmaDisponibilidadeFindOneByIdData,
  TurmaDisponibilidadeFindOneByIdResponse,
  TurmaDisponibilidadeListData,
  TurmaDisponibilidadeListResponse,
  TurmaDisponibilidadeUpdateOneByIdData,
  TurmaDisponibilidadeUpdateOneByIdResponse,
  TurmaFindOneByIdData,
  TurmaFindOneByIdResponse,
  TurmaGetImagemCapaData,
  TurmaGetImagemCapaResponse,
  TurmaListData,
  TurmaListResponse,
  TurmaSetImagemCapaData,
  TurmaSetImagemCapaResponse,
  TurmaUpdateOneByIdData,
  TurmaUpdateOneByIdResponse,
  UsuarioCreateData,
  UsuarioCreateResponse,
  UsuarioDeleteOneByIdData,
  UsuarioDeleteOneByIdResponse,
  UsuarioFindOneByIdData,
  UsuarioFindOneByIdResponse,
  UsuarioGetImagemCapaData,
  UsuarioGetImagemCapaResponse,
  UsuarioGetImagemPerfilData,
  UsuarioGetImagemPerfilResponse,
  UsuarioListData,
  UsuarioListResponse,
  UsuarioSetImagemCapaData,
  UsuarioSetImagemCapaResponse,
  UsuarioSetImagemPerfilData,
  UsuarioSetImagemPerfilResponse,
  UsuarioUpdateOneByIdData,
  UsuarioUpdateOneByIdResponse,
} from "./types.gen";

export class AmbientesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterBlocoId
   * @param data.filterBlocoCampusId
   * @returns AmbienteListResultView Resultados da busca a ambientes.
   * @throws ApiError
   */
  public ambienteList(data: AmbienteListData = {}): CancelablePromise<AmbienteListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ambientes",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.bloco.id": data.filterBlocoId,
        "filter.bloco.campus.id": data.filterBlocoCampusId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um ambiente.
   * @returns AmbienteFindOneResultView Visão FindOne de um ambiente.
   * @throws ApiError
   */
  public ambienteCreate(data: AmbienteCreateData): CancelablePromise<AmbienteCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/ambientes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns AmbienteFindOneResultView Visão FindOne de um ambiente.
   * @throws ApiError
   */
  public ambienteFindOneById(data: AmbienteFindOneByIdData): CancelablePromise<AmbienteFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ambientes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um ambiente.
   * @returns AmbienteFindOneResultView Visão FindOne de um ambiente.
   * @throws ApiError
   */
  public ambienteUpdateOneById(data: AmbienteUpdateOneByIdData): CancelablePromise<AmbienteUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/ambientes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public ambienteDeleteOneById(data: AmbienteDeleteOneByIdData): CancelablePromise<AmbienteDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/ambientes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public ambienteGetImagemCapa(data: AmbienteGetImagemCapaData): CancelablePromise<AmbienteGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ambientes/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public ambienteSetImagemCapa(data: AmbienteSetImagemCapaData): CancelablePromise<AmbienteSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/ambientes/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class ArquivosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Obtêm o conteúdo de um Arquivo.
   * @param data The data for the request.
   * @param data.id
   * @param data.acessoRecursoId
   * @param data.acessoRecursoNome
   * @param data.nomeRecurso Acesso via recurso: nome.
   * @param data.idRecurso Acesso via recurso: id.
   * @returns binary Binário do Arquivo.
   * @throws ApiError
   */
  public arquivoGetFile(data: ArquivoGetFileData): CancelablePromise<ArquivoGetFileResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/arquivos/{id}",
      path: {
        id: data.id,
      },
      query: {
        "acesso.recurso.id": data.acessoRecursoId,
        "acesso.recurso.nome": data.acessoRecursoNome,
        nomeRecurso: data.nomeRecurso,
        idRecurso: data.idRecurso,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class AulasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterDiarioId
   * @param data.filterAmbienteId
   * @returns AulaListResultView Resultados da busca a Aulas.
   * @throws ApiError
   */
  public aulaList(data: AulaListData = {}): CancelablePromise<AulaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/aulas",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.diario.id": data.filterDiarioId,
        "filter.ambiente.id": data.filterAmbienteId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Aula.
   * @returns AulaFindOneResultView Visão FindOne de uma Aula.
   * @throws ApiError
   */
  public aulaCreate(data: AulaCreateData): CancelablePromise<AulaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/aulas",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns AulaFindOneResultView Visão FindOne de uma Aula.
   * @throws ApiError
   */
  public aulaFindOneById(data: AulaFindOneByIdData): CancelablePromise<AulaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/aulas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Aula.
   * @returns AulaFindOneResultView Visão FindOne de uma Aula.
   * @throws ApiError
   */
  public aulaUpdateOneById(data: AulaUpdateOneByIdData): CancelablePromise<AulaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/aulas/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public aulaDeleteOneById(data: AulaDeleteOneByIdData): CancelablePromise<AulaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/aulas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class AutenticacaoService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Obtêm informações sobre o estado de autenticação do ator.
   * @returns AuthWhoAmIInputView Informações sobre o ator..
   * @throws ApiError
   */
  public authWhoAmI(): CancelablePromise<AuthWhoAmIResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/autenticacao/quem-sou-eu",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Operação de login.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para autenticação.
   * @returns AuthSessionCredentialsView Credenciais de sessão.
   * @throws ApiError
   */
  public authLogin(data: AuthLoginData): CancelablePromise<AuthLoginResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/autenticacao/login",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Obtêm as credenciais de sessão por meio do envio do token de refresh.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para refresh de autenticação.
   * @returns AuthSessionCredentialsView Credenciais de sessão.
   * @throws ApiError
   */
  public authRefresh(data: AuthRefreshData): CancelablePromise<AuthRefreshResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/autenticacao/login/refresh",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Operação para definir a senha inicial.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para definir a senha inicial.
   * @returns boolean
   * @throws ApiError
   */
  public authSetInitialPassword(data: AuthSetInitialPasswordData): CancelablePromise<AuthSetInitialPasswordResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/autenticacao/definir-senha",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class BaseService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * @returns unknown Olá, Mundo!
   * @throws ApiError
   */
  public appControllerGetHello(): CancelablePromise<AppControllerGetHelloResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/",
    });
  }
}

export class BlocosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCampusId
   * @returns BlocoListResultView Resultados da busca a blocos.
   * @throws ApiError
   */
  public blocoList(data: BlocoListData = {}): CancelablePromise<BlocoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/blocos",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.campus.id": data.filterCampusId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um bloco.
   * @returns BlocoFindOneResultView Visão FindOne de um bloco.
   * @throws ApiError
   */
  public blocoCreate(data: BlocoCreateData): CancelablePromise<BlocoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/blocos",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns BlocoFindOneResultView Visão FindOne de um bloco.
   * @throws ApiError
   */
  public blocoFindOneById(data: BlocoFindOneByIdData): CancelablePromise<BlocoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/blocos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um bloco.
   * @returns BlocoFindOneResultView Visão FindOne de um bloco.
   * @throws ApiError
   */
  public blocoUpdateOneById(data: BlocoUpdateOneByIdData): CancelablePromise<BlocoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/blocos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public blocoDeleteOneById(data: BlocoDeleteOneByIdData): CancelablePromise<BlocoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/blocos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public blocoGetImagemCapa(data: BlocoGetImagemCapaData): CancelablePromise<BlocoGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/blocos/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public blocoSetImagemCapa(data: BlocoSetImagemCapaData): CancelablePromise<BlocoSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/blocos/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class CalendariosLetivosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCampusId
   * @param data.filterOfertaFormacaoId
   * @returns CalendarioLetivoListResultView Resultados da busca a CalendarioLetivos.
   * @throws ApiError
   */
  public calendarioLetivoList(data: CalendarioLetivoListData = {}): CancelablePromise<CalendarioLetivoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/calendarios-letivos",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.campus.id": data.filterCampusId,
        "filter.ofertaFormacao.id": data.filterOfertaFormacaoId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um calendário letivo.
   * @returns CalendarioLetivoFindOneResultView Visão FindOne de um calendário letivo.
   * @throws ApiError
   */
  public calendarioLetivoCreate(data: CalendarioLetivoCreateData): CancelablePromise<CalendarioLetivoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/calendarios-letivos",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns CalendarioLetivoFindOneResultView Visão FindOne de um calendário letivo.
   * @throws ApiError
   */
  public calendarioLetivoFindOneById(data: CalendarioLetivoFindOneByIdData): CancelablePromise<CalendarioLetivoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/calendarios-letivos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um calendário letivo.
   * @returns CalendarioLetivoFindOneResultView Visão FindOne de um calendário letivo.
   * @throws ApiError
   */
  public calendarioLetivoUpdateOneById(data: CalendarioLetivoUpdateOneByIdData): CancelablePromise<CalendarioLetivoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/calendarios-letivos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public calendarioLetivoDeleteOneById(data: CalendarioLetivoDeleteOneByIdData): CancelablePromise<CalendarioLetivoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/calendarios-letivos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class CampiService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterEnderecoCidadeId
   * @param data.filterEnderecoCidadeEstadoId
   * @returns CampusListResultView Resultados da busca a campi.
   * @throws ApiError
   */
  public campusList(data: CampusListData = {}): CancelablePromise<CampusListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/campi",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.endereco.cidade.id": data.filterEnderecoCidadeId,
        "filter.endereco.cidade.estado.id": data.filterEnderecoCidadeEstadoId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Operação de criação de um campus.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um campus.
   * @returns CampusFindOneResultView Visão FindOne de um campus.
   * @throws ApiError
   */
  public campusCreate(data: CampusCreateData): CancelablePromise<CampusCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/campi",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns CampusFindOneResultView Visão FindOne de um campus.
   * @throws ApiError
   */
  public campusFindOneById(data: CampusFindOneByIdData): CancelablePromise<CampusFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/campi/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Operação de atualização de um campus.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um campus.
   * @returns CampusFindOneResultView Visão FindOne de um campus.
   * @throws ApiError
   */
  public campusUpdateOneById(data: CampusUpdateOneByIdData): CancelablePromise<CampusUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/campi/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public campusDeleteOneById(data: CampusDeleteOneByIdData): CancelablePromise<CampusDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/campi/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class CidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterEstadoId
   * @returns CidadeListResultView Resultados da busca a cidades.
   * @throws ApiError
   */
  public cidadeList(data: CidadeListData = {}): CancelablePromise<CidadeListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/base/cidades",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.estado.id": data.filterEstadoId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (numérico).
   * @returns CidadeFindOneResultView Visão FindOne de uma cidade.
   * @throws ApiError
   */
  public cidadeFindOneById(data: CidadeFindOneByIdData): CancelablePromise<CidadeFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/base/cidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class CursosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCampusId
   * @param data.filterOfertaFormacaoId
   * @returns CursoListResultView Resultados da busca a Cursos.
   * @throws ApiError
   */
  public cursoList(data: CursoListData = {}): CancelablePromise<CursoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/cursos",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.campus.id": data.filterCampusId,
        "filter.ofertaFormacao.id": data.filterOfertaFormacaoId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um Curso.
   * @returns CursoFindOneResultView Visão FindOne de um Curso.
   * @throws ApiError
   */
  public cursoCreate(data: CursoCreateData): CancelablePromise<CursoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/cursos",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns CursoFindOneResultView Visão FindOne de um Curso.
   * @throws ApiError
   */
  public cursoFindOneById(data: CursoFindOneByIdData): CancelablePromise<CursoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/cursos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um Curso.
   * @returns CursoFindOneResultView Visão FindOne de um Curso.
   * @throws ApiError
   */
  public cursoUpdateOneById(data: CursoUpdateOneByIdData): CancelablePromise<CursoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/cursos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public cursoDeleteOneById(data: CursoDeleteOneByIdData): CancelablePromise<CursoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/cursos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public cursoGetImagemCapa(data: CursoGetImagemCapaData): CancelablePromise<CursoGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/cursos/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public cursoSetImagemCapa(data: CursoSetImagemCapaData): CancelablePromise<CursoSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/cursos/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DiariosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterTurmaId
   * @param data.filterDisciplinaId
   * @param data.filterAmbientePadraoId
   * @param data.filterCalendarioLetivoId
   * @returns DiarioListResultView Resultados da busca a Diarios.
   * @throws ApiError
   */
  public diarioList(data: DiarioListData = {}): CancelablePromise<DiarioListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.turma.id": data.filterTurmaId,
        "filter.disciplina.id": data.filterDisciplinaId,
        "filter.ambientePadrao.id": data.filterAmbientePadraoId,
        "filter.calendarioLetivo.id": data.filterCalendarioLetivoId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um diário.
   * @returns DiarioFindOneResultView Visão FindOne de um diário.
   * @throws ApiError
   */
  public diarioCreate(data: DiarioCreateData): CancelablePromise<DiarioCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/diarios",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DiarioFindOneResultView Visão FindOne de um diário.
   * @throws ApiError
   */
  public diarioFindOneById(data: DiarioFindOneByIdData): CancelablePromise<DiarioFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um diário.
   * @returns DiarioFindOneResultView Visão FindOne de um diário.
   * @throws ApiError
   */
  public diarioUpdateOneById(data: DiarioUpdateOneByIdData): CancelablePromise<DiarioUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/diarios/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public diarioDeleteOneById(data: DiarioDeleteOneByIdData): CancelablePromise<DiarioDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/diarios/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DiariosPreferenciaAgrupamentoService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterDiarioId
   * @returns DiarioPreferenciaAgrupamentoListResultView Resultados da busca de DiarioPreferenciaAgrupamentos.
   * @throws ApiError
   */
  public diarioPreferenciaAgrupamentoList(data: DiarioPreferenciaAgrupamentoListData = {}): CancelablePromise<DiarioPreferenciaAgrupamentoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios-preferencia-agrupamento",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.diario.id": data.filterDiarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um DiarioPreferenciaAgrupamento.
   * @returns DiarioPreferenciaAgrupamentoFindOneResultView Visão FindOne de um DiarioPreferenciaAgrupamento.
   * @throws ApiError
   */
  public diarioPreferenciaAgrupamentoCreate(data: DiarioPreferenciaAgrupamentoCreateData): CancelablePromise<DiarioPreferenciaAgrupamentoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/diarios-preferencia-agrupamento",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DiarioPreferenciaAgrupamentoFindOneResultView Visão FindOne de um DiarioPreferenciaAgrupamento.
   * @throws ApiError
   */
  public diarioPreferenciaAgrupamentoFindOneById(data: DiarioPreferenciaAgrupamentoFindOneByIdData): CancelablePromise<DiarioPreferenciaAgrupamentoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios-preferencia-agrupamento/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um DiarioPreferenciaAgrupamento.
   * @returns DiarioPreferenciaAgrupamentoFindOneResultView Visão FindOne de um DiarioPreferenciaAgrupamento.
   * @throws ApiError
   */
  public diarioPreferenciaAgrupamentoUpdateOneById(data: DiarioPreferenciaAgrupamentoUpdateOneByIdData): CancelablePromise<DiarioPreferenciaAgrupamentoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/diarios-preferencia-agrupamento/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public diarioPreferenciaAgrupamentoDeleteOneById(data: DiarioPreferenciaAgrupamentoDeleteOneByIdData): CancelablePromise<DiarioPreferenciaAgrupamentoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/diarios-preferencia-agrupamento/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DiariosProfessoresService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterPerfilId
   * @param data.filterDiarioId
   * @returns DiarioProfessorListResultView Resultados da busca a DiarioProfessor.
   * @throws ApiError
   */
  public diarioProfessorList(data: DiarioProfessorListData = {}): CancelablePromise<DiarioProfessorListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios-professores",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.perfil.id": data.filterPerfilId,
        "filter.diario.id": data.filterDiarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um DiarioProfessor.
   * @returns DiarioProfessorFindOneResultView Visão FindOne de um DiarioProfessor.
   * @throws ApiError
   */
  public diarioProfessorCreate(data: DiarioProfessorCreateData): CancelablePromise<DiarioProfessorCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/diarios-professores",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DiarioProfessorFindOneResultView Visão FindOne de um DiarioProfessor.
   * @throws ApiError
   */
  public diarioProfessorFindOneById(data: DiarioProfessorFindOneByIdData): CancelablePromise<DiarioProfessorFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/diarios-professores/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um DiarioProfessor.
   * @returns DiarioProfessorFindOneResultView Visão FindOne de um DiarioProfessor.
   * @throws ApiError
   */
  public diarioProfessorUpdateOneById(data: DiarioProfessorUpdateOneByIdData): CancelablePromise<DiarioProfessorUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/diarios-professores/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public diarioProfessorDeleteOneById(data: DiarioProfessorDeleteOneByIdData): CancelablePromise<DiarioProfessorDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/diarios-professores/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DiasCalendariosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCalendarioId
   * @returns DiaCalendarioListResultView Resultados da busca a DiaCalendarios.
   * @throws ApiError
   */
  public diaCalendarioList(data: DiaCalendarioListData = {}): CancelablePromise<DiaCalendarioListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/dias-calendario",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.calendario.id": data.filterCalendarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um DiaCalendario.
   * @returns DiaCalendarioFindOneResultView Visão FindOne de um DiaCalendario.
   * @throws ApiError
   */
  public diaCalendarioCreate(data: DiaCalendarioCreateData): CancelablePromise<DiaCalendarioCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/dias-calendario",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DiaCalendarioFindOneResultView Visão FindOne de um DiaCalendario.
   * @throws ApiError
   */
  public diaCalendarioFindOneById(data: DiaCalendarioFindOneByIdData): CancelablePromise<DiaCalendarioFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/dias-calendario/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um DiaCalendario.
   * @returns DiaCalendarioFindOneResultView Visão FindOne de um DiaCalendario.
   * @throws ApiError
   */
  public diaCalendarioUpdateOneById(data: DiaCalendarioUpdateOneByIdData): CancelablePromise<DiaCalendarioUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/dias-calendario/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public diaCalendarioDeleteOneById(data: DiaCalendarioDeleteOneByIdData): CancelablePromise<DiaCalendarioDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/dias-calendario/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DisciplinasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterDiariosId
   * @returns DisciplinaListResultView Resultados da busca a Disciplinas.
   * @throws ApiError
   */
  public disciplinaList(data: DisciplinaListData = {}): CancelablePromise<DisciplinaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/disciplinas",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.diarios.id": data.filterDiariosId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Disciplina.
   * @returns DisciplinaFindOneResultView Visão FindOne de uma Disciplina.
   * @throws ApiError
   */
  public disciplinaCreate(data: DisciplinaCreateData): CancelablePromise<DisciplinaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/disciplinas",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DisciplinaFindOneResultView Visão FindOne de uma Disciplina.
   * @throws ApiError
   */
  public disciplinaFindOneById(data: DisciplinaFindOneByIdData): CancelablePromise<DisciplinaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/disciplinas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Disciplina.
   * @returns DisciplinaFindOneResultView Visão FindOne de uma Disciplina.
   * @throws ApiError
   */
  public disciplinaUpdateOneById(data: DisciplinaUpdateOneByIdData): CancelablePromise<DisciplinaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/disciplinas/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public disciplinaDeleteOneById(data: DisciplinaDeleteOneByIdData): CancelablePromise<DisciplinaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/disciplinas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public disciplinaGetImagemCapa(data: DisciplinaGetImagemCapaData): CancelablePromise<DisciplinaGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/disciplinas/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public disciplinaSetImagemCapa(data: DisciplinaSetImagemCapaData): CancelablePromise<DisciplinaSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/disciplinas/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class DisponibilidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns DisponibilidadeListResultView Resultados da busca a Disponibilidades.
   * @throws ApiError
   */
  public disponibilidadeList(data: DisponibilidadeListData = {}): CancelablePromise<DisponibilidadeListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/disponibilidades",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Disponibilidade.
   * @returns DisponibilidadeFindOneResultView Visão FindOne de uma Disponibilidade.
   * @throws ApiError
   */
  public disponibilidadeCreate(data: DisponibilidadeCreateData): CancelablePromise<DisponibilidadeCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/disponibilidades",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns DisponibilidadeFindOneResultView Visão FindOne de uma Disponibilidade.
   * @throws ApiError
   */
  public disponibilidadeFindOneById(data: DisponibilidadeFindOneByIdData): CancelablePromise<DisponibilidadeFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Disponibilidade.
   * @returns DisponibilidadeFindOneResultView Visão FindOne de uma Disponibilidade.
   * @throws ApiError
   */
  public disponibilidadeUpdateOneById(data: DisponibilidadeUpdateOneByIdData): CancelablePromise<DisponibilidadeUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/disponibilidades/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public disponibilidadeDeleteOneById(data: DisponibilidadeDeleteOneByIdData): CancelablePromise<DisponibilidadeDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class EstadosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns EstadoListResultView Resultados da busca a estados.
   * @throws ApiError
   */
  public estadoList(data: EstadoListData = {}): CancelablePromise<EstadoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/base/estados",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (numérico).
   * @returns EstadoFindOneResultView Visão FindOne de um estado.
   * @throws ApiError
   */
  public estadoFindOneById(data: EstadoFindOneByIdData): CancelablePromise<EstadoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/base/estados/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class EtapasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCalendarioId
   * @returns EtapaListResultView Resultados da busca a Etapas.
   * @throws ApiError
   */
  public etapaList(data: EtapaListData = {}): CancelablePromise<EtapaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/etapas",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.calendario.id": data.filterCalendarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Etapa.
   * @returns EtapaFindOneResultView Visão FindOne de uma Etapa.
   * @throws ApiError
   */
  public etapaCreate(data: EtapaCreateData): CancelablePromise<EtapaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/etapas",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns EtapaFindOneResultView Visão FindOne de uma Etapa.
   * @throws ApiError
   */
  public etapaFindOneById(data: EtapaFindOneByIdData): CancelablePromise<EtapaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/etapas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Etapa.
   * @returns EtapaFindOneResultView Visão FindOne de uma Etapa.
   * @throws ApiError
   */
  public etapaUpdateOneById(data: EtapaUpdateOneByIdData): CancelablePromise<EtapaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/etapas/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public etapaDeleteOneById(data: EtapaDeleteOneByIdData): CancelablePromise<EtapaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/etapas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class EventosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCalendarioId
   * @returns EventoListResultView Resultados da busca a Eventos.
   * @throws ApiError
   */
  public eventoList(data: EventoListData = {}): CancelablePromise<EventoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/eventos",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.calendario.id": data.filterCalendarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um Evento.
   * @returns EventoFindOneResultView Visão FindOne de um Evento.
   * @throws ApiError
   */
  public eventoCreate(data: EventoCreateData): CancelablePromise<EventoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/eventos",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns EventoFindOneResultView Visão FindOne de um Evento.
   * @throws ApiError
   */
  public eventoFindOneById(data: EventoFindOneByIdData): CancelablePromise<EventoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/eventos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um Evento.
   * @returns EventoFindOneResultView Visão FindOne de um Evento.
   * @throws ApiError
   */
  public eventoUpdateOneById(data: EventoUpdateOneByIdData): CancelablePromise<EventoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/eventos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public eventoDeleteOneById(data: EventoDeleteOneByIdData): CancelablePromise<EventoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/eventos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class GradesHorariosOfertasFormacoesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns GradeHorarioOfertaFormacaoListResultView Resultados da busca a GradeHorarioOfertaFormacaos.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoList(data: GradeHorarioOfertaFormacaoListData = {}): CancelablePromise<GradeHorarioOfertaFormacaoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/grades-horarios-ofertas-formacoes",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma oferta de formação.
   * @returns GradeHorarioOfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoCreate(data: GradeHorarioOfertaFormacaoCreateData): CancelablePromise<GradeHorarioOfertaFormacaoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/grades-horarios-ofertas-formacoes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns GradeHorarioOfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoFindOneById(data: GradeHorarioOfertaFormacaoFindOneByIdData): CancelablePromise<GradeHorarioOfertaFormacaoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/grades-horarios-ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma oferta de formação.
   * @returns GradeHorarioOfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoUpdateOneById(data: GradeHorarioOfertaFormacaoUpdateOneByIdData): CancelablePromise<GradeHorarioOfertaFormacaoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/grades-horarios-ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoDeleteOneById(data: GradeHorarioOfertaFormacaoDeleteOneByIdData): CancelablePromise<GradeHorarioOfertaFormacaoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/grades-horarios-ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class GradesHorariosOfertasFormacoesIntervalosDeTempoService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns GradeHorarioOfertaFormacaoIntervaloDeTempoListResultView Resultados da busca a GradeHorarioOfertaFormacaoIntervaloDeTempos.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoIntervaloDeTempoList(data: GradeHorarioOfertaFormacaoIntervaloDeTempoListData = {}): CancelablePromise<GradeHorarioOfertaFormacaoIntervaloDeTempoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/grades-horarios-ofertas-formacoes-intervalos-de-tempo",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma oferta de formação.
   * @returns GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoIntervaloDeTempoCreate(data: GradeHorarioOfertaFormacaoIntervaloDeTempoCreateData): CancelablePromise<GradeHorarioOfertaFormacaoIntervaloDeTempoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/grades-horarios-ofertas-formacoes-intervalos-de-tempo",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoIntervaloDeTempoFindOneById(
    data: GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneByIdData,
  ): CancelablePromise<GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/grades-horarios-ofertas-formacoes-intervalos-de-tempo/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma oferta de formação.
   * @returns GradeHorarioOfertaFormacaoIntervaloDeTempoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoIntervaloDeTempoUpdateOneById(
    data: GradeHorarioOfertaFormacaoIntervaloDeTempoUpdateOneByIdData,
  ): CancelablePromise<GradeHorarioOfertaFormacaoIntervaloDeTempoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/grades-horarios-ofertas-formacoes-intervalos-de-tempo/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public gradeHorarioOfertaFormacaoIntervaloDeTempoDeleteOneById(
    data: GradeHorarioOfertaFormacaoIntervaloDeTempoDeleteOneByIdData,
  ): CancelablePromise<GradeHorarioOfertaFormacaoIntervaloDeTempoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/grades-horarios-ofertas-formacoes-intervalos-de-tempo/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class HorariosGeradosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns HorarioGeradoListResultView Resultados da busca de HorariosGerados.
   * @throws ApiError
   */
  public horarioGeradoList(data: HorarioGeradoListData = {}): CancelablePromise<HorarioGeradoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/horarios-gerados",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um HorarioGerado.
   * @returns HorarioGeradoFindOneResultView Visão FindOne de um HorarioGerado.
   * @throws ApiError
   */
  public horarioGeradoCreate(data: HorarioGeradoCreateData): CancelablePromise<HorarioGeradoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/horarios-gerados",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns HorarioGeradoFindOneResultView Visão FindOne de um HorarioGerado.
   * @throws ApiError
   */
  public horarioGeradoFindOneById(data: HorarioGeradoFindOneByIdData): CancelablePromise<HorarioGeradoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/horarios-gerados/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um HorarioGerado.
   * @returns HorarioGeradoFindOneResultView Visão FindOne de um HorarioGerado.
   * @throws ApiError
   */
  public horarioGeradoUpdateOneById(data: HorarioGeradoUpdateOneByIdData): CancelablePromise<HorarioGeradoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/horarios-gerados/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public horarioGeradoDeleteOneById(data: HorarioGeradoDeleteOneByIdData): CancelablePromise<HorarioGeradoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/horarios-gerados/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class HorariosGeradosAulaService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns HorarioGeradoAulaListResultView Resultados da busca de HorarioGeradoAulas.
   * @throws ApiError
   */
  public horarioGeradoAulaList(data: HorarioGeradoAulaListData = {}): CancelablePromise<HorarioGeradoAulaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/horarios-gerados-aula",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um HorarioGeradoAula.
   * @returns HorarioGeradoAulaFindOneResultView Visão FindOne de um HorarioGeradoAula.
   * @throws ApiError
   */
  public horarioGeradoAulaCreate(data: HorarioGeradoAulaCreateData): CancelablePromise<HorarioGeradoAulaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/horarios-gerados-aula",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns HorarioGeradoAulaFindOneResultView Visão FindOne de um HorarioGeradoAula.
   * @throws ApiError
   */
  public horarioGeradoAulaFindOneById(data: HorarioGeradoAulaFindOneByIdData): CancelablePromise<HorarioGeradoAulaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/horarios-gerados-aula/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um HorarioGeradoAula.
   * @returns HorarioGeradoAulaFindOneResultView Visão FindOne de um HorarioGeradoAula.
   * @throws ApiError
   */
  public horarioGeradoAulaUpdateOneById(data: HorarioGeradoAulaUpdateOneByIdData): CancelablePromise<HorarioGeradoAulaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/horarios-gerados-aula/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public horarioGeradoAulaDeleteOneById(data: HorarioGeradoAulaDeleteOneByIdData): CancelablePromise<HorarioGeradoAulaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/horarios-gerados-aula/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class ModalidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns ModalidadeListResultView Resultados da busca a Modalidades.
   * @throws ApiError
   */
  public modalidadeList(data: ModalidadeListData = {}): CancelablePromise<ModalidadeListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/modalidades",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma modalidade.
   * @returns ModalidadeFindOneResultView Visão FindOne de uma modalidade.
   * @throws ApiError
   */
  public modalidadeCreate(data: ModalidadeCreateData): CancelablePromise<ModalidadeCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/modalidades",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns ModalidadeFindOneResultView Visão FindOne de uma modalidade.
   * @throws ApiError
   */
  public modalidadeFindOneById(data: ModalidadeFindOneByIdData): CancelablePromise<ModalidadeFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/modalidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma modalidade.
   * @returns ModalidadeFindOneResultView Visão FindOne de uma modalidade.
   * @throws ApiError
   */
  public modalidadeUpdateOneById(data: ModalidadeUpdateOneByIdData): CancelablePromise<ModalidadeUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/modalidades/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public modalidadeDeleteOneById(data: ModalidadeDeleteOneByIdData): CancelablePromise<ModalidadeDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/modalidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class NiveisFormacoesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns NivelFormacaoListResultView Resultados da busca aos níveis de formações.
   * @throws ApiError
   */
  public nivelFormacaoList(data: NivelFormacaoListData = {}): CancelablePromise<NivelFormacaoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/niveis-formacoes",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um nível de formação.
   * @returns NivelFormacaoFindOneResultView Visão FindOne de um nível de formação.
   * @throws ApiError
   */
  public nivelFormacaoCreate(data: NivelFormacaoCreateData): CancelablePromise<NivelFormacaoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/niveis-formacoes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns NivelFormacaoFindOneResultView Visão FindOne de um nível de formação.
   * @throws ApiError
   */
  public nivelFormacaoFindOneById(data: NivelFormacaoFindOneByIdData): CancelablePromise<NivelFormacaoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um nível de formação.
   * @returns NivelFormacaoFindOneResultView Visão FindOne de um nível de formação.
   * @throws ApiError
   */
  public nivelFormacaoUpdateOneById(data: NivelFormacaoUpdateOneByIdData): CancelablePromise<NivelFormacaoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public nivelFormacaoDeleteOneById(data: NivelFormacaoDeleteOneByIdData): CancelablePromise<NivelFormacaoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class OfertasFormacoesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns OfertaFormacaoListResultView Resultados da busca a OfertaFormacaos.
   * @throws ApiError
   */
  public ofertaFormacaoList(data: OfertaFormacaoListData = {}): CancelablePromise<OfertaFormacaoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ofertas-formacoes",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma oferta de formação.
   * @returns OfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoCreate(data: OfertaFormacaoCreateData): CancelablePromise<OfertaFormacaoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/ofertas-formacoes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns OfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoFindOneById(data: OfertaFormacaoFindOneByIdData): CancelablePromise<OfertaFormacaoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma oferta de formação.
   * @returns OfertaFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoUpdateOneById(data: OfertaFormacaoUpdateOneByIdData): CancelablePromise<OfertaFormacaoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public ofertaFormacaoDeleteOneById(data: OfertaFormacaoDeleteOneByIdData): CancelablePromise<OfertaFormacaoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/ofertas-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class OfertasFormacoesNiveisFormacoesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns OfertaFormacaoNivelFormacaoListResultView Resultados da busca a OfertaFormacaoNivelFormacaos.
   * @throws ApiError
   */
  public ofertaFormacaoNivelFormacaoList(data: OfertaFormacaoNivelFormacaoListData = {}): CancelablePromise<OfertaFormacaoNivelFormacaoListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ofertas-formacoes-niveis-formacoes",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma oferta de formação.
   * @returns OfertaFormacaoNivelFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoNivelFormacaoCreate(data: OfertaFormacaoNivelFormacaoCreateData): CancelablePromise<OfertaFormacaoNivelFormacaoCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/ofertas-formacoes-niveis-formacoes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns OfertaFormacaoNivelFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoNivelFormacaoFindOneById(data: OfertaFormacaoNivelFormacaoFindOneByIdData): CancelablePromise<OfertaFormacaoNivelFormacaoFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/ofertas-formacoes-niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma oferta de formação.
   * @returns OfertaFormacaoNivelFormacaoFindOneResultView Visão FindOne de uma oferta de formação.
   * @throws ApiError
   */
  public ofertaFormacaoNivelFormacaoUpdateOneById(data: OfertaFormacaoNivelFormacaoUpdateOneByIdData): CancelablePromise<OfertaFormacaoNivelFormacaoUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/ofertas-formacoes-niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public ofertaFormacaoNivelFormacaoDeleteOneById(data: OfertaFormacaoNivelFormacaoDeleteOneByIdData): CancelablePromise<OfertaFormacaoNivelFormacaoDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/ofertas-formacoes-niveis-formacoes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class PerfisService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterCargo
   * @param data.filterAtivo
   * @param data.filterCampusId
   * @param data.filterUsuarioId
   * @returns PerfilListResultView Resultados da busca a Vínculos.
   * @throws ApiError
   */
  public perfilList(data: PerfilListData = {}): CancelablePromise<PerfilListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/vinculos",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.cargo": data.filterCargo,
        "filter.ativo": data.filterAtivo,
        "filter.campus.id": data.filterCampusId,
        "filter.usuario.id": data.filterUsuarioId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a alteração de vínculo de um Usuário a um Campus.
   * @returns PerfilListResultView Resultados da busca a Vínculos.
   * @throws ApiError
   */
  public perfilUpdateOneById(data: PerfilUpdateOneByIdData): CancelablePromise<PerfilUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/vinculos",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class ProfessoresDisponibilidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterProfessorId
   * @returns ProfessorDisponibilidadeListResultView Resultados da busca a ProfessorDisponibilidades.
   * @throws ApiError
   */
  public professorDisponibilidadeList(data: ProfessorDisponibilidadeListData = {}): CancelablePromise<ProfessorDisponibilidadeListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/professores-disponibilidades",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.professor.id": data.filterProfessorId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma ProfessorDisponibilidade.
   * @returns ProfessorDisponibilidadeFindOneResultView Visão FindOne de uma ProfessorDisponibilidade.
   * @throws ApiError
   */
  public professorDisponibilidadeCreate(data: ProfessorDisponibilidadeCreateData): CancelablePromise<ProfessorDisponibilidadeCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/professores-disponibilidades",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns ProfessorDisponibilidadeFindOneResultView Visão FindOne de uma ProfessorDisponibilidade.
   * @throws ApiError
   */
  public professorDisponibilidadeFindOneById(data: ProfessorDisponibilidadeFindOneByIdData): CancelablePromise<ProfessorDisponibilidadeFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/professores-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma ProfessorDisponibilidade.
   * @returns ProfessorDisponibilidadeFindOneResultView Visão FindOne de uma ProfessorDisponibilidade.
   * @throws ApiError
   */
  public professorDisponibilidadeUpdateOneById(data: ProfessorDisponibilidadeUpdateOneByIdData): CancelablePromise<ProfessorDisponibilidadeUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/professores-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public professorDisponibilidadeDeleteOneById(data: ProfessorDisponibilidadeDeleteOneByIdData): CancelablePromise<ProfessorDisponibilidadeDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/professores-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class ReservasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterDataInicio
   * @param data.filterDataTermino
   * @param data.intervaloDeTempoPeriodoInicio
   * @param data.intervaloDeTempoPeriodoFim
   * @returns ReservaListResultView Resultados da busca a Reservas.
   * @throws ApiError
   */
  public reservaList(data: ReservaListData = {}): CancelablePromise<ReservaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/reservas",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.dataInicio": data.filterDataInicio,
        "filter.dataTermino": data.filterDataTermino,
        "intervaloDeTempo.periodoInicio": data.intervaloDeTempoPeriodoInicio,
        "intervaloDeTempo.periodoFim": data.intervaloDeTempoPeriodoFim,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Reserva.
   * @returns ReservaFindOneResultView Visão FindOne de uma Reserva.
   * @throws ApiError
   */
  public reservaCreate(data: ReservaCreateData): CancelablePromise<ReservaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/reservas",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns ReservaFindOneResultView Visão FindOne de uma Reserva.
   * @throws ApiError
   */
  public reservaFindOneById(data: ReservaFindOneByIdData): CancelablePromise<ReservaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/reservas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Reserva.
   * @returns ReservaFindOneResultView Visão FindOne de uma Reserva.
   * @throws ApiError
   */
  public reservaUpdateOneById(data: ReservaUpdateOneByIdData): CancelablePromise<ReservaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/reservas/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public reservaDeleteOneById(data: ReservaDeleteOneByIdData): CancelablePromise<ReservaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/reservas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class TurmasService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterAmbientePadraoAulaNome
   * @param data.filterAmbientePadraoAulaCodigo
   * @param data.filterAmbientePadraoAulaCapacidade
   * @param data.filterAmbientePadraoAulaTipo
   * @param data.filterCursoNome
   * @param data.filterCursoNomeAbreviado
   * @param data.filterCursoCampusId
   * @param data.filterCursoModalidadeId
   * @returns TurmaListResultView Resultados da busca a Turmas.
   * @throws ApiError
   */
  public turmaList(data: TurmaListData = {}): CancelablePromise<TurmaListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/turmas",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.ambientePadraoAula.nome": data.filterAmbientePadraoAulaNome,
        "filter.ambientePadraoAula.codigo": data.filterAmbientePadraoAulaCodigo,
        "filter.ambientePadraoAula.capacidade": data.filterAmbientePadraoAulaCapacidade,
        "filter.ambientePadraoAula.tipo": data.filterAmbientePadraoAulaTipo,
        "filter.curso.nome": data.filterCursoNome,
        "filter.curso.nomeAbreviado": data.filterCursoNomeAbreviado,
        "filter.curso.campus.id": data.filterCursoCampusId,
        "filter.curso.modalidade.id": data.filterCursoModalidadeId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma Turma.
   * @returns TurmaFindOneResultView Visão FindOne de uma Turma.
   * @throws ApiError
   */
  public turmaCreate(data: TurmaCreateData): CancelablePromise<TurmaCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/turmas",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns TurmaFindOneResultView Visão FindOne de uma Turma.
   * @throws ApiError
   */
  public turmaFindOneById(data: TurmaFindOneByIdData): CancelablePromise<TurmaFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/turmas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma Turma.
   * @returns TurmaFindOneResultView Visão FindOne de uma Turma.
   * @throws ApiError
   */
  public turmaUpdateOneById(data: TurmaUpdateOneByIdData): CancelablePromise<TurmaUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/turmas/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public turmaDeleteOneById(data: TurmaDeleteOneByIdData): CancelablePromise<TurmaDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/turmas/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public turmaGetImagemCapa(data: TurmaGetImagemCapaData): CancelablePromise<TurmaGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/turmas/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public turmaSetImagemCapa(data: TurmaSetImagemCapaData): CancelablePromise<TurmaSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/turmas/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class TurmasDisponibilidadesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @param data.filterTurmaId
   * @returns TurmaDisponibilidadeListResultView Resultados da busca a TurmaDisponibilidades.
   * @throws ApiError
   */
  public turmaDisponibilidadeList(data: TurmaDisponibilidadeListData = {}): CancelablePromise<TurmaDisponibilidadeListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/turmas-disponibilidades",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
        "filter.turma.id": data.filterTurmaId,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de uma TurmaDisponibilidade.
   * @returns TurmaDisponibilidadeFindOneResultView Visão FindOne de uma TurmaDisponibilidade.
   * @throws ApiError
   */
  public turmaDisponibilidadeCreate(data: TurmaDisponibilidadeCreateData): CancelablePromise<TurmaDisponibilidadeCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/turmas-disponibilidades",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns TurmaDisponibilidadeFindOneResultView Visão FindOne de uma TurmaDisponibilidade.
   * @throws ApiError
   */
  public turmaDisponibilidadeFindOneById(data: TurmaDisponibilidadeFindOneByIdData): CancelablePromise<TurmaDisponibilidadeFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/turmas-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de uma TurmaDisponibilidade.
   * @returns TurmaDisponibilidadeFindOneResultView Visão FindOne de uma TurmaDisponibilidade.
   * @throws ApiError
   */
  public turmaDisponibilidadeUpdateOneById(data: TurmaDisponibilidadeUpdateOneByIdData): CancelablePromise<TurmaDisponibilidadeUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/turmas-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public turmaDisponibilidadeDeleteOneById(data: TurmaDisponibilidadeDeleteOneByIdData): CancelablePromise<TurmaDisponibilidadeDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/turmas-disponibilidades/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}

export class UsuariosService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.page Página de consulta.
   * @param data.limit Limite da quantidade de resultados por página.
   * @param data.search Busca textual.
   * @param data.sortBy Ordenação.
   * @returns UsuarioListResultView Resultados da busca a usuários.
   * @throws ApiError
   */
  public usuarioList(data: UsuarioListData = {}): CancelablePromise<UsuarioListResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/usuarios",
      query: {
        page: data.page,
        limit: data.limit,
        search: data.search,
        sortBy: data.sortBy,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.requestBody Dados de entrada para a criação de um usuário.
   * @returns UsuarioFindOneResultView Visão FindOne de um Usuário.
   * @throws ApiError
   */
  public usuarioCreate(data: UsuarioCreateData): CancelablePromise<UsuarioCreateResponse> {
    return this.httpRequest.request({
      method: "POST",
      url: "/usuarios",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns UsuarioFindOneResultView Visão FindOne de um Usuário.
   * @throws ApiError
   */
  public usuarioFindOneById(data: UsuarioFindOneByIdData): CancelablePromise<UsuarioFindOneByIdResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/usuarios/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.requestBody Dados de entrada para a atualização de um Usuário.
   * @returns UsuarioFindOneResultView Visão FindOne de um Usuário.
   * @throws ApiError
   */
  public usuarioUpdateOneById(data: UsuarioUpdateOneByIdData): CancelablePromise<UsuarioUpdateOneByIdResponse> {
    return this.httpRequest.request({
      method: "PATCH",
      url: "/usuarios/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns boolean
   * @throws ApiError
   */
  public usuarioDeleteOneById(data: UsuarioDeleteOneByIdData): CancelablePromise<UsuarioDeleteOneByIdResponse> {
    return this.httpRequest.request({
      method: "DELETE",
      url: "/usuarios/{id}",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public usuarioGetImagemCapa(data: UsuarioGetImagemCapaData): CancelablePromise<UsuarioGetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/usuarios/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Sem descrição.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public usuarioSetImagemCapa(data: UsuarioSetImagemCapaData): CancelablePromise<UsuarioSetImagemCapaResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/usuarios/{id}/imagem/capa",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Obtêm a imagem de perfil.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @returns binary Binário.
   * @throws ApiError
   */
  public usuarioGetImagemPerfil(data: UsuarioGetImagemPerfilData): CancelablePromise<UsuarioGetImagemPerfilResponse> {
    return this.httpRequest.request({
      method: "GET",
      url: "/usuarios/{id}/imagem/perfil",
      path: {
        id: data.id,
      },
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }

  /**
   * Define a imagem de perfil.
   * @param data The data for the request.
   * @param data.id Identificador do registro (uuid).
   * @param data.formData
   * @returns boolean Resultado da operação.
   * @throws ApiError
   */
  public usuarioSetImagemPerfil(data: UsuarioSetImagemPerfilData): CancelablePromise<UsuarioSetImagemPerfilResponse> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/usuarios/{id}/imagem/perfil",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        403: "O solicitante não tem permissão para executar esta ação.",
        404: "Registro não encontrado.",
      },
    });
  }
}
