# Pipeline de CI/CD
name: CI/CD

# Configuração de gatilhos do workflow
on:
  # Permite execução manual do workflow através da interface do GitHub
  workflow_dispatch:
  # Executa automaticamente quando houver push para a branch main
  push:
    branches:
      - main
    paths:
      # Apenas quando alterações forem feitas neste arquivo ou em arquivos do serviço
      - .github/workflows/ci-cd.yml
      - .devcontainer/ci-cd/**/*
      - .github/utils/deploy-k8s-helm-stakater-application.sh
      - packages/service/**/*

# Evita execuções simultâneas do mesmo workflow
concurrency:
  group: ci-cd-${{ github.ref }}

jobs:
  # Job para construção e publicação da imagem de contêiner
  service-ci-image:
    name: "CI: Construção e Publicação da Imagem de Contêiner"
    runs-on: ubuntu-latest

    environment:
      name: ci-cd-management-service-dev

    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v4

      - name: Obtenção de segredos do Infisical para build
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98
        with:
          # Configuração de acesso ao Infisical para obter variáveis de ambiente seguras
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}

          project-slug: ${{ secrets.INFISICAL_PROJECT_SLUG }}
          secret-path: ${{ secrets.INFISICAL_VARS_BUILD_PUSH }}

          env-slug: ${{ secrets.INFISICAL_ENV_SLUG }}

      - name: Configuração do Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Autenticação no Registry de Contêineres
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Construção e publicação da imagem de contêiner
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          # Diretório contendo o Dockerfile
          context: .
          # Estágio do Dockerfile a ser utilizado
          target: "service-runtime"
          # Tag para a imagem construída
          tags: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME  }}:development
          # Configurações de cache e push
          push: true
          load: false
          no-cache: false

  # Job para implantação da aplicação no cluster Kubernetes
  service-cd-cluster:
    name: "CD: Implantação no Cluster Kubernetes"
    runs-on: deploy
    # Este job depende da conclusão bem-sucedida do job ci-image
    needs: [service-ci-image]

    environment:
      name: ci-cd-management-service-dev
      url: ${{ vars.DEPLOY_URL }}

    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v4

      - name: Obtenção de segredos do Infisical para deploy
        uses: Infisical/secrets-action@a663da43e1541832614bfd9dcf9ab67381ea2b98
        with:
          # Configuração de acesso ao Infisical para obter variáveis de ambiente seguras
          domain: ${{ secrets.INFISICAL_DOMAIN }}
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}

          project-slug: ${{ secrets.INFISICAL_PROJECT_SLUG }}
          secret-path: ${{ secrets.INFISICAL_VARS_DEPLOY }}

          env-slug: ${{ secrets.INFISICAL_ENV_SLUG }}

      - name: Implantação da aplicação no Kubernetes via Helm
        env:
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE  }}
          K8S_DEPLOYMENT: ${{ env.K8S_DEPLOYMENT }}

          HELM_RELEASE_NAME: ${{ env.K8S_DEPLOYMENT }}
          HELM_RELEASE_VALUES: ${{ env.DEPLOY_HELM_VALUES }}
          HELM_RELEASE_EXTRA_OPTIONS: ${{ env.DEPLOY_HELM_EXTRA_OPTIONS }}
        shell: bash
        run: bash .github/utils/deploy-k8s-helm-stakater-application.sh

  service-client-ci-npm:
    name: "CI: Construção e Publicação do Client NPM"
    runs-on: ubuntu-latest

    environment:
      name: ci-cd-management-service-dev

    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v4

      - name: Run dev-container
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6
        with:
          imageName: registry.ladesa.local/management-service/devcontainer
          imageTag: latest
          inheritEnv: true

          configFile: .devcontainer/ci-cd/devcontainer.json
          push: never

          runCmd: |
            echo "Hello, World!"
            pwd
            ls
            # bunx pkg-pr-new publish --comment=update './integrations/npm/api-client-fetch'
