name: "CI: Generate Integrations"

on:
  push:
    branches:
      - development

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  PR_TARGET_BRANCH: development
  BRANCH_GENERATED_INTEGRATIONS: automated-ci/generate-integrations

  INTEGRATIONS_PATH: integrations
  GENERATED_COMMIT_MESSAGE: "chore(integrations/openapi-json): automated update"

jobs:
  ci-generate-integratins:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install
        uses: ./.github/actions/prepare/install
        with:
          install-node: "true"

      - name: Build integrations
        run: pnpm exec nx run-many -t build --projects=tag:integrations;

      - name: Format integrations
        run: pnpm run -w format:fix integrations;

      - name: Check if has changes
        run: |
          if git status --porcelain | grep -q -E "^\?\? ${INTEGRATIONS_PATH}|^ M ${INTEGRATIONS_PATH}"; then
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "has_changes=false" >> $GITHUB_ENV
          fi

      - name: Set up Git
        if: env.has_changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and push
        if: env.has_changes == 'true'
        run: |
          git add ${INTEGRATIONS_PATH};
          git commit -m "${GENERATED_COMMIT_MESSAGE}";

          if git show-ref --verify --quiet refs/heads/${BRANCH_GENERATED}; then
            git branch -D ${BRANCH_GENERATED}
          fi

          git checkout -b ${BRANCH_GENERATED}
          git push origin ${BRANCH_GENERATED} --force

      - name: Create or update pull request
        if: env.has_changes == 'true'
        run: |
          # source: https://github.com/cli/cli/discussions/5792#discussioncomment-10410197
          PR_URL="$(gh pr list -B "${PR_TARGET_BRANCH}" -H "${BRANCH_GENERATED}" --state open --json url --jq .[].url)"

          NOW=$(date +'%Y-%m-%dT%H:%M:%S')

          PR_TITLE="${GENERATED_COMMIT_MESSAGE}"
          PR_BODY="**Workflow**: ${{ github.workflow }}\n**Job**: ${{ github.job }}.\n**Run number**: ${{ github.run_number }}.\nUpdated at: ${NOW}."
          PR_BODY_FILE="/tmp/pr-body.txt"

          echo -e "${PR_BODY}" > ${PR_BODY_FILE}

          if [[ -n "${PR_URL}" ]]; then
              echo "PR already exists -> ${PR_URL}"
              gh pr edit \
                "${PR_URL}" \
                --title "${PR_TITLE}" \
                --body-file "${PR_BODY_FILE}" \
              ;
          else
            gh pr create \
              -B "${{ env.target-branch }}" \
              -H "${{ env.generated-branch }}" \
              --title "${PR_TITLE}" \
              --body-file "${PR_BODY_FILE}" \
            ;
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branch and pull request if has no changes
        if: env.has_changes == 'false'
        run: |
          # source: https://github.com/cli/cli/discussions/5792#discussioncomment-10410197
          PR_URL="$(gh pr list -B "${PR_TARGET_BRANCH}" -H "${BRANCH_GENERATED}" --state open --json url --jq .[].url)"

          if [[ -n "${PR_URL}" ]]; then
            gh pr close "${PR_URL}" -d;
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
